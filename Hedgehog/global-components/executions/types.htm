<html>
<head>
    <title>Execution Types</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="hedgehog, executions" />
	<meta name="sequence" content="300"  />
</head>
<body>

   
    <p>
        There are several types of executions. 
    </p>
  <h2 id="pipeline">Pipeline Stage Execution</h2>
    <p>
            This execution is initiated through Pipeline deployments (i.e. not quick deploy), and deploys a specified Deployment Set to the specified Stage in its pipeline. It will also dispatch additional <a href="#pipeline-targeted">Pipeline Targeted Deployment Executions</a>.
    </p>
   <p>
       A pipeline stage is comprised of several elements, including pre-deployment steps, deployment targets, and post-deployment steps. Because pre- and post-deployment steps are effectively OtterScript operations (except for Execute OtterScript Plan, which is a plan), sets of pre- or post-deployment steps are converted into a single OtterScript plan. This OtterScript plan runs in the localhost server context by default, but other servers may be targeted using the "for server..." OtterScript notation, as long as those servers are not restricted by environment.
   </p>
    <p>
        After validating that the package set can be deployed to the specified stage and the pre- and post-deployment plans are valid, the pre-deployment plan is run. Each target is then evaluated, and a <a href="#pipeline-targeted">Pipeline Targeted Execution</a> is dispatched for that target. Once all targets have completed, the post-deployment plan is run.
    </p>
    <h2 id="infrastructure-import">Infrastructure Import Execution</h2>
    <p>
        This execution is dispatched either manually (from the web UI), or from the Infrastructure Sync Task Runner when the infrastructure has changed.
    </p>
    <p>
        The manually dispatched execution has the following options:
    </p>
    <p>
        <ul class="docs">
            <li>
                <strong>Infrastructure JSON</strong>: a document describing servers, roles, environments, and variables on each
            </li>
            <li>
                <strong>Flags</strong>: various Boolean options
                <ul class="docs">
                    <li>
                        <strong>Import Variables</strong>: variables described will be imported/replaced
                    </li>
                    <li>
                        <strong>Mirror</strong>: infrastructure not in the JSON document will be deleted
                    </li>
                    <li>
                        <strong>Dry Run</strong>: no actual changes will be made, only logged
                    </li>
                </ul>
            </li>
        </ul>
    </p>
    <p>
        When triggered manually, the user will provide the JSON and checkboxes for each of the flags.
    </p>
    <p>
        When triggered from the task runner, the JSON will be whatever was returned from the other instance's infrastructure. In addition, variables will be imported, the infrastructure will be mirrored, and it will only be a dry run if configured globally to be a dry run.
    </p>
    <h2 id="automatic">Automatic Approval Gate Execution</h2>
    <p>
        TBD. This may or may not be needed, because the task runner probably won't fail; it would be dispatched from the web front for diagnostic purposes, similar to how <a href="/support/documentation/buildmaster/modeling-applications/issues-projects">issue import works in buildmaster</a>.
    </p>
    <h2 id="deployment">Deployment Execution Types</h2>
    <p>
        A deployment execution runs a specified deployment plan against optional Server Targeting, while providing additional context (such as runtime variables and information about the project, release, package, etc). 
    </p>
    <p>
        There are two types of deployment executions: Package Deployment and Pipeline Deployment. Both types use Server Targeting.
    </p>
    <h3 id="package-deployment">Package Deployment Execution</h3>
    <p>
        This is a Deployment Execution that is initiated through the Quick Deploy workflow. A Server Target is always specified, and the deployment plan is either stored within Hedgehog or the package (<code>install.otter</code>).
    </p>
    <p>
        Once loaded and compiled, the actual plan is wrapped in a <a href="/support/documentation/executionengine/reference/formal-specification#set-context-statement">Set Context Statement</a> (with a ContextType of package, and ContextValue of the package name). The plan is then wrapped using the Server Targeting described below.
    </p>
    <h3 id="pipeline-targeted">Pipeline Targeted Execution</h3>
    <p>
        A Pipeline Targeted Execution is dispatched by a Pipeline Stage Execution, and allows for deploying multiple packages in a package set.
    </p>
    <p>
        Each package in the set is wrapped in a <a href="/support/documentation/executionengine/reference/formal-specification#set-context-statement">Set Context Statement</a> (with a ContextType of package, and ContextValue of the package name), and that plan is then wrapped using the Server Targeting described below.
    </p>
    <h4 id="server-targeting">Server Targeting</h4>
    <p>
        If Server Targeting is also specified, then the plan will be wrapped as follows before execution.
    </p>
    <h4 id="direct-targeting">Direct Targeting</h4>
    <p>
        A single <a href="/support/documentation/executionengine/reference/formal-specification#set-context-statement">Context Iteration Statement</a> will be created with the Source set to a literal expression of the server names (e.g. @(<code>Server1</code>, <code>Server2</code>, <code>Server3</code>). The Body contain an <a href="/support/documentation/executionengine/reference/formal-specification#execution-directive-statement">Execution Directive Statement</a> with an Asynchronous flag, and the Body of that will contain the actual plan.
    </p>
    <h4 id="roles-environments">Roles + Environment Targeting</h4>
    <p>
        For every role targeted, a <a href="/support/documentation/executionengine/reference/formal-specification#set-context-statement">Set Context Statement</a> (with a ContextType of <code>role</code>, and ContextValue of the role name) will be created. The Body of those statements will be comprised of a single <a href="/support/documentation/executionengine/reference/formal-specification#context-iteration-statement">Context Iteration Statement</a> with the Source set to a literal expression of the servers in that role and environment. The Body contains an <a href="/support/documentation/executionengine/reference/formal-specification#execution-directive-statement">Execution Directive Statement</a> with an Asynchronous flag, and the Body of that will contain the actual plan.
    </p>
    <p>
        If no servers were in any of the role iterations, then a Log-Warning statement will be appended to the wrapped plan, as the actual plan will not execute.
    </p>
    <h4 id="failure">Pre-execution Failure</h4>
    <p>
        This execution invokes the <a href="/support/documentation/executionengine/components/runtime-variables">OtterScript runtime</a> to execute either the specified plan directly, or a wrapped version of the plan.
    </p>
    <p>
        If an error condition occurs before the runtime is invoked, such as a complication error or a pipeline resolution error, the error message will be written to logs, the Execution Status will be set to Error, and the Run State will be set to Completed.
    </p>

   
</body>
</html>