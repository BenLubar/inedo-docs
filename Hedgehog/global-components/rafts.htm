<html>
<head>
    <title>Rafts</title>
    <meta name="subtitle" content="Rafts in Hedgehog" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="hedgehog, packages, rafts" />
    <meta name="sequence" content="400" />
</head>
<body>

    <div class="attention technical">
        <img src="/resources/images/icons/technical.png" />
        <p>
            <strong>Rafts are an advanced feature:</strong> If you are just getting started with Hedgehog, you should revisit this topic once you've familiarized yourself with the other components.
        </p>
    </div>
   
    <p>
        Plans, assets, pipelines, and templates are essentially just files, and to make sharing, versioning, branching, etc. possible, Hedgehog uses a <strong>raft</strong> to store these files. A raft is sort of abstracted file system, specifically designed for storing these types of items.
    </p>
    <h2 id="default-raft">The Default Raft</h2>
    <p>
        Because you likely won't need multiple rafts right away, a raft named "Default" is automatically created when you install Hedgehog. This is a Database raft and is backed up when you do a regular <a href="/docs/hedgehog/installation/backing-up">Back-up of Hedgehog</a>. 
    </p>
    <p>
        If you only have a single raft configured, and that raft is named "Default", then the ability to filter or select rafts will not be exposed on plan, project, asset, etc. pages.
    </p>
    <h2 id="managing">Creating, Managing, and Downloading Rafts</h2>
    <p>
        You can create, manage, and download a raft as a zip file by going to Admin > Global Components > Rafts. 
    </p>
    <h3 id="projects">Rafts and Projects</h3>
    <p>
        When you specify a raft for a project, Hedgehog will always search within the associated raft for content, using the <a href="/docs/hedgehog/bundling/projects/content-name">Project Content Name Resolution</a> search. Only the associated raft will be searched, which means that if a parent project uses a different raft, content may never be located. If no raft is specified, then the "Default" raft (if one is named that) is used. 
    </p>
    <h3 id="repository">Raft Repository Types</h3>
    <p>
        Rafts rely on an <a href="/docs/hedgehog/administration/extensions">Extensible Raft Provider</a> to retrieve and store raft data. There are three built-in raft types: 
    </p>
    <p>
        <ul class="docs">
            <li>
                <strong>Database</strong>: this is the default raft provider, and persists all information in Hedgehog's database; while the contents are not versioned, it's the simplest to use and back-up as part of the Hedgehog database 
            </li>
            <li>
                <strong>Disk</strong>: the raft is persisted as a simple file structure on disk; this may be appropriate for quick testing purposes 
            </li>
            <li>
                <strong>Git</strong>: this raft is synchronized with a branch of a remote Git repository. <!--See the [Storing Hedgehog Content and Configurations in Git] tutorial to learn how to use this type of raft. -->
            </li>
        </ul>
    </p>
    <h2 id="disk-layout">Disk Layout Conventions</h2>
    <p>
        When stored on disk, in source control, or exported as a zip file, rafts are laid-out as follows.
    </p>



    <table>
         <tbody>
            <tr>
                <td>
                    Deployment Plans
                </td>
                <td>
                    Files (.otter) within the /plans subdirectory
                </td>
            </tr>
             <tr>
                 <td>
                     Variables
                 </td>
                 <td>
                     An OtterScript stored in the /variables file, consisting entirely of assign variable statements
                 </td>
             </tr>
             <tr>
                 <td>
                     Scripts
                 </td>
                 <td>
                     Files (.ps1, .js, .sh) within the /scripts subdirectory
                 </td>
             </tr>
             <tr>
                 <td>
                     Modules
                 </td>
                 <td>
                     Files (.otter) within the /lib subdirectory
                 </td>
             </tr>
             <tr>
                 <td>
                     Assets
                 </td>
                 <td>
                     Files within the /files subdirectory
                 </td>
             </tr>
             <tr>
                 <td>
                     Pipelines
                 </td>
                 <td>
                     Files (.json) within the /pipelines subdirectory
                 </td>
             </tr>
             <tr>
                 <td>
                     Deployment set Templates
                 </td>
                 <td>
                     Files (.json) within the /deployment-set-templates subdirectory
                 </td>
             </tr>
             <tr>
                 <td>
                     Project-specific Content
                 </td>
                 <td>
                     A /projects subdirectory containing directories named by the project, and a layout identical to a raft
                 </td>
             </tr>
        </tbody>
    </table>
    
    <h3 id="project-specific">Project-specific Content</h3>
    <p>
        Project-specific content is stored in directory named after the project in a /projects subdirectory. While this may make for some long paths, it allows for projects to be named anything. For example, the "default" pipeline in the BuildMaster > SDK project would be here: /projects/BuildMaster/projects/SDK/pipelines/default.json
    </p>
    <h3 id="variables">Raft Variables</h3>
    <p>
        Variables persisted within a raft are not currently displayed anywhere in the UI, and are intended to be used for storing default or fallback values for plans stored in portable/reusable rafts. They are the lowest scope, and are only used if a <a href="/docs/hedgehog/deliver-deploy/configuration-variables">Configuration Variable</a> of the same name does not exist. 
    </p>
    <h2 id="asset">Raft Asset Resolution</h2>
    <p>
        Hedgehog can automatically resolve names using the <a href="/docs/hedgehog/bundling/projects/content-name">Project Content Name Resolution</a> system, sometimes it's convenient to specify an explicit, fully-qualified path. You can do this with a combination of raft names and Project Paths.
    </p>
    <p>
        <ul class="docs">
            <li>
                <strong>AssetName</strong>: this uses project content name resolution, and searches the folder of the current project (if exists), and then up the projects chain to the root
            </li>
            <li>
                <strong>RaftName::AssetName</strong>: searches the root (only) of the specified raft
            </li>
            <li>
                <strong>RaftName::ProjectPath::AssetName</strong>: searches the project path (e.g. /buildmaster/sdk) only
            </li>
        </ul>
    </p>
</body>
</html>