<html>
  <head>
    <title>Extending Hedgehog</title>
      <meta name="subtitle" content="Extending Hedgehog" />
      <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
      <meta name="sequence" content="500" />
      <meta name="keywords" content="otter,sdk" />
  </head>
  <body>

   <p>
        A lot of Hedgehog's functionality is delivered through extensions, a type of pluggable component library that provides both core capabilities as well as integrations with third-party tools. You can see what extensions are loaded, as well as install new, or upgrade extensions from the Admin > Extensions Page within your instance of Hedgehog.    
</p> 
<h2>
    Built-Extensions
</h2>
<p>
    Hedgehog ships with three required extensions: <i>InedoCore</i>, <i>Windows</i>, and <i>Linux</i>. When these are not installed, you will receive warnings in the UI, and the software will be missing core functionality. 
</p>
 <h2>
     New Extensions and Updates
 </h2>
 <p>
     Hedgehog will automatically connect to the <a href="/den">inedo.com/den</a>, and notify you of newly available extensions and updates. You can download and install these from the same extensions overview page. 
 </p>
 <div class= "attention best-practice">
        <img src= "/resources/images/icons/best-practices.png"/>
        <p>
         A connection to inedo.com is recommended, but not required. If your Hedgehog instance cannot connect to inedo.com/den, then you will need to manually install and update extensions. 
        </p>
        </div>
<h2>
Creating your Own Extension
</h2>
<p>
    Although you can already do <em>anything</em> in Hedgehog with Script Assets and the other tightly-integrated PowerShell features, you can also build an <em>Hedgehog Extension</em> to add additional components and functionality into your Hedgehog installation. 
</p>
<p>
    A lot of Hedgehog's functionality is delivered through built-in extensions, and you can add several types of components by simply <a href="/support/documentation/inedosdk/extending/creating">creating an extension</a> that's built against the  <a href="/support/documentation/inedosdk/overview">Inedo SDK</a>. Here's what you can extend: 
</p>
<ul class="docs">
    
    <li><b>Operations</b> - executed during a deployment plan</li>
    <li><b>Raft Repositories</b> - backing storage for plans and assets</li>
    <li><b>Resource Credentials</b> - a secret</li>
    <li><b>User Directories</b> - authentication and privileges</li>
    <li><b>Variable Functions</b> - used in plans to provide or manipulate values</li>
</ul>
<h2>
    Script Assets vs Custom Extensions
</h2>
<p>
  Scripts are significantly easier to develop and manage: just write, test, then upload (or commit), and your script will be available for execution in a plan as any other operation. For most things you'd need to do in a plan, that's perfectly adequate.   
</p>
<p>
    Extensions are a bit more involved, but allow you to build components other than operations, and provide maximum flexibility for building operations. You can also incorporate third-party libraries into your extension, and use the powerful libraries already built-in to the Inedo SDK. 
</p>
<ul class="docs">
    <li><b>Direct Agent Access</b> - with components from <a href="/support/sdk-reference/inedosdk/Inedo.Agents">Inedo.Agents</a>, you can build Operations that will be faster and scale better than using scripting runtime. </li>
    <li><b>Rich Descriptions</b> - the <a href="/support/sdk-reference/inedosdk/Inedo.Documentation">Inedo.Documentation</a> components enable you to describe Operations in a plan using a consistent, visually-rich description, so that anyone reading it will see, at-a-glance, what the operation is configured to do.</li>
    
</ul>
<p>
    Additionally, extension may be easier to unit test and mock using the testing framework of your choice.
</p>

  </body>
</html>