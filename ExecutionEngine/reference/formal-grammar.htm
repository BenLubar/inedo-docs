<html>
<head>
    <title>Formal Grammar</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="otterscript,plans" />
    <meta name="show-headings-in-nav" content="true" />
    <meta name="sequence" content="20" />
</head>
<body>
    <style>
        .info.buildmaster {
            border-color: #f15a24;
            color: #f15a24;
        }

        .proposed-textonly {
            display: inline-block;
            padding: 2px 2px 8px 2px;
            color: #333;
            background-color:#dedede;
            min-width: 40px;
        }
            .proposed-textonly::before{
              background-color: #eaeaea;
              font-style:italic;
              opacity:0.9;
              content: 'proposed';
              position: absolute;
              margin: 16px 0 0 4px;
              font-size: 10px;
              padding: 0px 1px;
            }

        .buildmaster-only {
            display: inline-block;
            padding: 2px 2px 8px 2px;
            color: #f15a24;
            background-color:#FFD9A3;
            min-width: 40px;
        }
            .buildmaster-only::before{
              background-color: #eaeaea;
              font-style:italic;
              opacity:0.9;
              content: 'BuildMaster only';
              position: absolute;
              margin: 16px 0 0 4px;
              font-size: 10px;
              padding: 0px 1px;
            }

        .otter-only {
            display: inline-block;
            padding: 2px 2px 8px 2px;
            color: #9163aa;
            background-color:#ded0e5;
            min-width: 40px;
        }
            .otter-only::before{
              background-color: #eaeaea;
              font-style:italic;
              opacity:0.9;
              content: 'Otter only';
              position: absolute;
              margin: 16px 0 0 4px;
              font-size: 10px;
              padding: 0px 1px;
            }


        .statement {
            font-weight: bold;
        }

            .statement:before {
                content: '«';
                font-weight: normal;
            }

            .statement:after {
                content: '»';
                font-weight: normal;
            }

        .syntax {
            color: #999;
        }

        .keyword {
            font-weight: bold;
            color: #336;
        }
        .proposed{
          background-color: #faece5;
          padding: 2px 70px 2px 0;
        }
            .proposed::after{
              background-color: #eaeaea;
              font-style:italic;
              opacity:0.9;
              content: 'proposed';
              position: absolute;
              margin: 6px 0 0 4px;
              font-size: 12px;
              padding: 0px 1px;
            }



        .element {
            font-weight: normal;
            color: #558;
        }

            .element:before {
                content: '/';
                color: #DDF;
            }

            .element:after {
                content: '/';
                color: #DDF;
            }

        .symbol {
            font-weight: bold;
            color: #633;
        }

        .quoted {
            font-weight: bold;
            color: #633;
        }

            .quoted:before {
                content: '"';
                font-weight: normal;
            }

            .quoted:after {
                content: '"';
                font-weight: normal;
            }

        .optional {
            color: #ddd;
        }
    </style>
    <script type="text/javascript">
//<![CDATA[
        $(function () {
            var replacements =
            {
                statement: /^<(\w+)>$/,
                proposed: { regex: /\*((.)+)\*/, hint: /^\*/, recurse: true, greedy: false },
                "otter-only": { regex: /%O((.)+)%/, hint: /^%O/, recurse: true, greedy: false },
                "buildmaster-only": { regex: /%B((.)+)%/, hint: /^%B/, recurse: true, greedy: false },
                // otter-only
                quoted: /^"(.)"$/,
                syntax: /(\[|\]|\(|\)|\|)/,
                symbol: /([;\{\}])/,
                element: /\/(\w+)\//,
                keyword: { regex: /^([a-zA-Z]+)$/, greedy: true },
                whitespace: { regex: /(\s)/, noreplace: true}
            };

            function doreplacement(grammar)
            {
                var newGrammar = '', buffer = '', index = 0, match = false;
                for (var i = 0; i < grammar.length; i++) {
                    
                    buffer += grammar[i];
                    for (var key in replacements) {
                        var replacement = replacements[key];
                        if (replacement instanceof (RegExp)) {
                            replacement = { regex: replacement };
                        }

                        var hint = replacement.hint || replacement.regex;

                        if (hint.test(buffer)) {

                            if (replacement.greedy) {

                                i++;
                                while (i < grammar.length && replacement.regex.test(buffer)) {
                                    buffer += grammar[i];
                                    i++;
                                }                                
                                i--;
                            }
                            if (replacement.regex.test(buffer)) {
                                match = { regex: replacement.regex, key: key, noreplace: !!replacement.noreplace, recurse: !!replacement.recurse };
                            }
                            break;
                        }
                    }
                    if (match) {
                        if (!match.noreplace)
                        {
                            if (match.recurse)
                            {
                                buffer = buffer.replace(match.regex, "$1");
                                buffer = doreplacement(buffer);
                                buffer = '<span class="' + match.key + '">' + buffer + '</span>';
                            }
                            else
                                buffer = buffer.replace(match.regex, '<span class="' + match.key + '">$1</span>');
                        }                            

                        newGrammar += buffer;
                        buffer = '';
                        match = null;
                    }
                }
                newGrammar += buffer;
                return newGrammar;
            }

            var node = document.getElementsByTagName('otter-grammar')[0];
            
            node.innerHTML = doreplacement(node.firstChild.nodeValue);
        });
    //]]></script>
    <p>
        The following formal grammar defines a valid OtterScript using a <a href="#conventions">BNF-like convention</a>.
        This guide may be useful for writing syntax hilighters or script validators. See 
        the <a href="formal-specification">formal specification</a> to learn how these specifically behave.
    </p>
    <noscript>To view the OtterScript Grammar, view the source of this page under the otter-grammar node.</noscript>
    <otter-grammar style="white-space:pre; font-family: monospace; font-size: 13px;"><!--
<otter_script> ::=
  [<global_variable_declaration>] [..n]
  [<scoped_statement_block>] [..n]
                                                                                         
<global_variable_declaration> ::=
  global /variable_expression/ = /literal_expression/;

                                                                                                                                                                                                                                                                       
<scoped_statement_block> ::=
  [<named_template>] [..n]
  [<statement>] [..n]

<statement> ::=
  <action_statement> | <anonymous_block_statement> | <assign_variable_statement> | 
  <await_statement> | <call_template_statement> | <context_iteration_statement> | 
  <error_statement> | <execution_directive_statement> | <fail_statement> | 
  <iteration_block_statement> | <log_statement> | <predicate_statement> | 
  <set_context_statement> | <throw_statement> | <try_statement> | <warn_statement> |
  <force_normal_statement>

<action_statement> ::=
  [/namespace/::]/operation_name/ [/literal_expression/] ["("
     ( (/param_name/: /literal_expression/) |
       (/param_name/=> /variable_expression/) )
     [,...n]
  ")"];                                                                                        
                                                                                         
<anonymous_block_statement> ::=
  { <scoped_statement_block> }

<assign_variable_statement> ::=
  set ( /variable_expression/ | /indexed_expression/ ) = /literal_expression/;

<await_statement> ::=
  await [/async_token/];

<call_template_statement> ::=
  call [/raft_name/::]/template_name/ ["("
     ( (/param_name/: /literal_expression/) |
       (/param_name/=> /variable_expression/) )
     [,...n]
  ")"];

<context_iteration_statement> ::=
  foreach /context_type/ in /vector_expression/ {  <scoped_statement_block> }

<error_statement> ::=
  error;

<execution_directive_statement> ::=
  with <execution_directive> [,...n]
  { <scoped_statement_block> }

<execution_directive> ::=
  retry=<integer> |
  timeout=<integer> |
  executionPolicy=(always|onChange) |
  async[=/async_token/] |
  lock[=[!]/lock_token/] |
  isolation |
  credentials=<userNamePasswordCredentials>

<fail_statement> ::=
  fail;

<iteration_block_statement> ::=
  foreach /variable_expression/ in /vector_expression/ {  <scoped_statement_block> }

<log_statement> ::=
  Log-(Debug|Information|Warning|Error) /literal_expression/;

<force_normal_statement> ::=
   force normal;

<predicate_statement> ::=
  if <predicate_expression> { <scoped_statement_block> }
  [ else { <statements> } ]

<set_context_statement> ::=
  for /context_type/ /literal_expression/ { <scoped_statement_block> }

<throw_statement> ::=
  throw [/literal_expression/];

<try_statement> ::=
  try { <scoped_statement_block> }
  catch { <scoped_statement_block> }

<warn_statement> ::=
  [force] warn;

<named_template> ::=
  template /template_name/ 
  ["<" 
     ([out] /template_param_name/[=/param_default/])
     [,...n] 
  ">"] { <statements> }

--></otter-grammar>

    <h2 id="elements" data-title="Grammar Elements">Grammar Elements</h2>
    <p>The grammar refers to the following elements.</p>
    <div>
        <table>
            <tr>
                <td>
                    <code>any_name</code><br />
                    <code>namespace</code><br />
                    <code>operation_name</code><br />
                    <code>param_name</code><br />
                    <code>template_name</code>
                </td>
                <td>
                    No more than fifty characters: numbers (0-9), upper- and lower-case letters (a-Z), dashes (-), and underscores (_);
                    must start with a letter, and may not start or end with a dash or underscore
                </td>
            </tr>
            <tr>
                <td>
                    <code>async_token</code><br />
                    <code>lock_token</code><br />
                </td>
                <td>
                    No more than fifty characters: numbers (0-9), upper- and lower-case letters (a-Z);
                    must start with a letter. 
		    We are considering changing this to allow variable expansion; see <a href="https://inedo.myjetbrains.com/youtrack/issue/IEE-21"  class="proposed-textonly">IEE-21</a>, and let us know if this would be helpful.
		    </span>
		    
                </td>
            </tr>
            <tr>
                <td><code>template_param_name</code></td>
                <td>A variable type identifier ($, @, or %) immediately followed by <code>any_name</code></td>
            </tr>
            <tr>
                <td><code>context_type</code></td>
                <td>
                    Either <code>server</code>, <code>role</code>,
                    <code class="buildmaster-only">deployable</code>,
                    or <code>directory</code>
                </td>
            </tr>
            <tr>
                <td><code>param_default</code></td>
                <td>An implicit or quoted string</td>
            </tr>
            <tr>
                <td><code>comment</code></td>
                <td>See <a href="comments-and-descriptions">Comments &amp; Descriptions</a></td>
            </tr>

            <tr>
                <td><code>variable_expression</code></td>
                <td>
                    A variable type identifier ($, @, or %) immediately followed by one of:
                    <ul>
                        <li>simple name - follows same rules as <code>any_name</code></li>
                        <li>
                            explicit name - a left-curly brace (<code>{</code>), followed by of characters with the
                            same rules as any_name but that also allow spaces, followed by a right-curly brace (<code>}</code>)
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td><code>literal_expression</code></td>
                <td>a <code>scalar_expression</code>, <code>vector_expression, or <code>map_expression</code></code></td>
            </tr>
            <tr>
                <td>
                    <code>scalar_expression</code>
                </td>
                <td>a string; see <a href="strings-and-literals">Strings and Literals</a></td>
            </tr>
            <tr>
                <td><code>indexed_expression</code></td>
                <td>
                    A <code>variable_expression</code> for a vector (@) or map (%) type, immediately followed one of:
                    <ul>
                        <li>left bracket (<code>[</code>), <code>scalar_expression</code>, then right bracket (<code>]</code>)</li>
                        <li>dot (<code>.</code>) then <code>scalar_expression</code></li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>
                    <code>vector_expression</code>
                </td>
                <td>
                    one of:
                    <ul>
                        <li>a <code>variable_expression</code> for a vector (@) type, or a </li>
                        <li>
                            a @ character followed by left-parens (<code>(</code>), and any number of
                            <code>literal_expression</code> delimeted with commas (<code>,</code>), followed
                            by a right-parens (<code>)</code>)
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>
                    <code>map_expression</code>
                </td>
                <td>
                    one of:
                    <ul>
                        <li>a <code>variable_expression</code> for a map (%) type, or a </li>
                        <li>
                            a % character followed by left-parens (<code>(</code>), and any number of
                            key-values pairs delimeted with commas (<code>,</code>), followed
                            by a right-parens (<code>)</code>). A key-value pair consists of <code>any_name</code>,
                            followed by a colon (<code>:</code>), followed by a <code>literal_expression</code>
                        </li>
                    </ul>
                </td>
            </tr>
        </table>
    </div>

    <h2 id="conventions" data-title="Grammar Conventions">Grammar Conventions</h2>
    <p>
        The following conventions are used to describe OtterScript's grammar, and are used in documentation and examples.
    </p>
    <table>
        <tr>
            <td><code>&lt;label&gt; ::=</code></td>
            <td>
                The name for a block of syntax. This convention is used to group and label sections of lengthy syntax or a unit of syntax that
                can be used in more than one location within a statement. Each location in which the block of syntax can be used is indicated
                with the label enclosed in chevrons: &lt;label&gt;.
            </td>
        </tr>
        <tr>
            <td>text</td>
            <td>Undecorated text is an OtterScript keyword.</td>
        </tr>
        <tr>
            <td><code>( )</code> (parens)</td>
            <td>Syntactical grouping for lists and optional items. Do not type the parens.</td>
        </tr>
        <tr>
            <td>[,...n]</td>
            <td>Indicates the preceding item can be repeated n number of times. The occurrences are separated by commas.</td>
        </tr>
        <tr>
            <td>[...n]</td>
            <td>Indicates the preceding item can be repeated n number of times. The occurrences are separated by blanks.</td>
        </tr>
        <tr>
            <td><code>[ ]</code> (brackets)</td>
            <td>Optional syntax items. Do not type the brackets.</td>
        </tr>
        <tr>
            <td><code>|</code> (vertical bar)</td>
            <td>Separates syntax items enclosed in brackets or braces. You can use only one of the items.</td>
        </tr>
        <tr>
            <td><code>" "</code> (quotes)</td>
            <td>Required syntax item, used for parens, brackets, etc. Do not type the quotes.</td>
        </tr>
        <tr>
            <td><code>/ /</code> (slashes)</td>
            <td>Required grammar element.</td>
        </tr>
    </table>

</body>
</html>
