<html>
<head>
    <title>PowerShell &amp; Shell Scripting</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="buildmaster,powershell,linux,scripts" />
    <meta name="show-headings-in-nav" content="true" />
    <meta name="sequence" content="50" />
</head>
<body>
    <p>
        PowerShell is the standard for automating configuration on Windows servers, and
        Bash/Sh is the standard for automating configuration on Linux servers. OtterScript was designed to seamlessly integrate with both, whether that
        means running your existing scripts across dozens of servers, leveraging scripts built by the community, or a combination of both.
    </p>
    <p>
        While you definitely don't need to be a scripting expert, learning how to incorporate scripts into your OtterScript plans will enable you to automate virtually any aspect of Windows or Linux.
    </p>

    <h2 id="inline-execution" data-title="Inline PowerShell"><a name="inline-powershell-execution"></a>Inline Script Execution</h2>
    <p>
        Through <code>PSExec</code>, <code>SHExec</code>
        and <a href="../otterscript/strings-and-literals#string-syntax">Swim Strings</a>,
        you can incorporate scripts directly into your OtterScript plans.
    </p>
    <inedo:tab-block>
        <tab name="PowerShell">
<pre>psexec >>
  # delete all but the latest 3 logs in the log directory
  Get-ChildItem "E:\Site\Logs\$ApplicationName" |
     Sort-Object $.CreatedDate -descending |
     Select-Object -skip 3 |
     Remove-Item
>>;</pre>
        </tab>
        <tab name="Shell">
            <pre>shexec >>
  echo "Hello from $ApplicationName";
>>;</pre>
        </tab>
    </inedo:tab-block>
    <p>The operation will seamlessly replace variables within your PowerShell script, so in the example above <code>$ApplicationName</code> might be defined as a configuration variable.</p>

    <h2 id="calling-scripts" data-title="Calling PowerShell"><a name="calling-powershell-scripts"></a>Calling Scripts</h2>
    <p>
        After writing or uploading a script as an asset, you can invoke it with <code>PSCall</code> or <code>SHCall</code>
        as it was an Operation.
    </p>
    <inedo:tab-block>
        <tab name="PowerShell">
            <pre>pscall CreateUserInDirectory(
  domain: hdars.local,
  user: $UserName
);</pre><p>
                If you use PowerShell's header documentation standards, you'll get descriptions for script arguments when editing in visual mode.
            </p>
        </tab>
        <tab name="Shell">
            <pre>shcall ConfigDirectory(
  arguments: -domain=hdars.local -user=$UserName
);</pre>
        </tab>
    </inedo:tab-block>

    <h2 id="evaluating-powershell-literals" data-title="Evaluating PowerShell">Evaluating PowerShell Literals</h2>
    <p>
        OtterScript is not a general-purpose programming language, and doesn't have built-in support for arithmetic expressions.
        You could write a <a href="runtime-variables#variable-functions">custom variable function</a> to support this, but <code>PSEval</code> is much easier:
    </p>
    <p>
        For example, if you wanted to convert the value stored in one variable (<code>$minutes</code>) to milliseconds.
        You could use PSEval to calculate the simple expression <code>$minutes * 60 * 1000</code>:
    </p>
    <div>
<pre>
set $milliseconds = $PSEval($minutes * 60 * 1000);
</pre>
    </div>
    <p>
        $PSEval runs the expression on the server currently in context, so use it inside of an <a href="otterscript/statements-and-blocks/if-else">If/Else Block</a> to perform different operations depending on the results
        of the expression on that server.
    </p>
    <h2 id="powershell-dsc" data-title="PowerShell DSC">PowerShell DSC</h2>
    <p>
        <a href="https://msdn.microsoft.com/en-us/powershell/dsc/overview">PowerShell Desired State Configuration (DSC)</a> offers
        <a href="https://github.com/powershell/">quite a few open-source modules</a> that you can use to configure different features of Windows Servers.
        With
        <code>PSDsc</code>, you can invoke DSC Resources in nearly the same manner as a native DSC statement.
    </p>
    <div>
<pre>
PSDsc xWebAppPool (
  Name: AccountsAppPool,
  Ensure: present
);
</pre>
    </div>
    <p>These declarative-style statements are essentially <i>Ensure Operations</i>, and thus will collect, report, and remediate drift just like the built-in operations.</p>
    <h2 id="ensuring-scripts" data-title="Ensuring with PowerShell">Ensuring with Scripts</h2>
    <p>
        You can also use PowerShell or Shell scripts to gather and ensure a configuration about a server using <code>PSEnsure</code>
        and SHEnsure.
    </p>

    <h2 id="built-in-operations-scripts" data-title="Scripts vs Operations">Built-in Operations vs Scripts</h2>
    <p>
        Because a script can do anything, there's some possible overlap between built-in operations
        and scripted commands.
    </p>
    <p>
        In general, you should use a built-in operation when possible. Operations are designed to be massively parallel, cancellation-aware, and highly performant, while also providing rich descriptions when viewed outside of code.
    </p>
    <p>
        Many scripts, on the other hand, might be written to run interactively, and may prompt for user input if an argument is missing, or do other things not suitable in for non-interactive, scalable environments.
    </p>
</body>
</html>