<html>
<head>
    <title>Application Configuration Files</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="execution-engine, buildmaster, otter, hedgehog, configuration-files" />
    <meta name="sequence" content="10" />
    <meta name="show-headings-in-nav" content="true" />
</head>
<body>

    <style type="text/css">
        div.code-container {
            background-color: #f6f6f6;
            border: 1px solid #999;
            padding: 10px;
        }
    </style>

    <p>
        Configuration files are intended to represent application configuration files that are deployed side-by-side with a release package.
        Common examples include the web.config file in .NET or a .properties file in Java.
    </p>
    <p>
        Configuration File Text Templates are treated as text template assets and are independent from other files in a deployment artifact because their contents may
        be orthogonal to the application itself or contain environment-specific data such as database connection strings, third-party service URLs, versioning information, etc.
    </p>

    <h2 id="simple" data-title="Simple Configuration Files">Simple Configuration Files</h2>
    <p>
        As a replacement for Configuration File Asset Templates in BuildMaster v5.8, <a href="/docs/buildmaster/reference/templating" target="_blank">Text Templating</a>
        in combination with <a href="/docs/buildmaster/global-components/configuration-variables" target="_blank">Configuration Variables</a> can be used as a mechanism
        to deploy configuration files. Traditional configuration file assets may rely on specific key/value pairs that duplicate the functionality of existing configuration variables,
        but do not allow conditionals or loops.
    </p>

    <h3 id="example">Example</h3>
    <p>
        Using the following values for the text template, deployment plan and configuration variables:
    </p>
    <h5>Text Template</h5>
    <p>A text template named <code>WebConfig</code> in the application with the contents:</p>
    <div class="code-container">
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;configuration&gt;
  &lt;appSettings&gt;
    &lt;add key="Accounts.Value" value="$EnvironmentName"/&gt;
    &lt;% if $DebugMode { %&gt;
    &lt;add key="Accounts.BuildNumber" value="$PackageNumber"/&gt;
    &lt;% } %&gt;
  &lt;/appSettings&gt;
  &lt;system.web&gt;
    &lt;compilation
      &lt;% if $DebugMode { %&gt;
      debug="true"
      &lt;% } else { %&gt;
      debug="false"
      &lt;% } %&gt;
      targetFramework="4.5.2"/&gt;
    &lt;customErrors mode="Off"/&gt;
    &lt;pages controlRenderingCompatibilityVersion="4.0"/&gt;
  &lt;/system.web&gt;
  &lt;system.webServer&gt;
    &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;</code></pre>
    </div>
    <h5>Configuration Variables</h5>
    <p>The following variables are examples such that all deployments to pipeline stages associated with integration use <code>$DebugMode=true</code>:</p>
    <table>
        <thead>
            <tr>
                <th>Scope</th>
                <th>Name</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>System</td>
                <td>$DebugMode</td>
                <td>false</td>
            </tr>
            <tr>
                <td>Environment (Integration)</td>
                <td>$DebugMode</td>
                <td>true</td>
            </tr>
            <tr>
                <td>Pipeline Stage (Integration)</td>
                <td>$TargetDirectory</td>
                <td>D:\Web\TestWebApp-Int</td>
            </tr>
        </tbody>
    </table>

    <h5>Example OtterScript Deployment Plan</h5>
    <div class="code-container">
<pre><code>for server us.web.01.test-shared
{
    Deploy-Artifact $ApplicationName.Web
    (
        To: $TargetDirectory
    );

    Apply-Template WebConfig
    (
        OutputFile: $PathCombine($TargetDirectory, web.config)
    );
}
</code></pre>
    </div>

    <h5>Example Result</h5>
    <p>Assuming the targeted pipeline stage of the "TestWebApp" application is associated with the Integration environment, the resulting output file will be deployed to <code>D:\Web\TestWebApp-Int\web.config</code>:</p>
    <div class="code-container">
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;configuration&gt;
  &lt;appSettings&gt;
    &lt;add key="Accounts.Value" value="Integration"/&gt;
    
    &lt;add key="Accounts.BuildNumber" value="1000"/&gt;
    
  &lt;/appSettings&gt;
  &lt;system.web&gt;
    &lt;compilation
      
      debug="true"
      
      targetFramework="4.5.2"/&gt;
      &lt;customErrors mode="Off"/&gt;
      &lt;pages controlRenderingCompatibilityVersion="4.0"/&gt;
  &lt;/system.web&gt;
  &lt;system.webServer&gt;
    &lt;modules runAllManagedModulesForAllRequests="true"/&gt;
  &lt;/system.webServer&gt;
&lt;/configuration&gt;</code></pre>
    </div>

    <p>
        Since text templates are transformed using a simplified OtterScript syntax, all configuration variables, runtime variables, variable functions (i.e. <code>$ReleaseNumber</code>), if/else conditionals,
        and loop syntax are supported.
    </p>

</body>
</html>