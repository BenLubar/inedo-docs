<html>
<head>
    <title>Runtime Variables</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="buildmaster,otterscript,variables" />
    <meta name="sequence" content="40" />
</head>
<body>
    <p>
        Variables allow for extreme flexibility when modeling your <a href="/docs/buildmaster/core-concepts/deployment-plans" target="_blank">deployment plans</a>.
        There are a lot of uses for variables, some of the most common are:
    </p>
    <ul class="docs">
        <li>Arguments/properties of <a href="/docs/executionengine/components/operations-functions">Operations</a></li>
        <li>Conditional execution using an <a href="/docs/executionengine/otterscript/statements-and-blocks/if-else">If/Else Block</a></li>
        <li>Iteration/enumeration using a <a href="/docs/executionengine/otterscript/statements-and-blocks/loop">Loop Block</a></li>
    </ul>
    <p>
        Like <a href="/docs/buildmaster/global-components/configuration-variables">configuration variables</a>, which are essentially values that you can
        assign to a server, application, environment, release, etc., runtime variables are used by the execution engine 
        while running a plan.
    </p>
    <h2 id="types" data-title="Runtime Variable Types">Runtime Variable Types</h2>
    <p>
        There are three types of runtime variables, and each is denoted by a prefix.
    </p>
    <table>
        <tr><th>Prefix</th><th>Type</th><th>Description</th></tr>
        <tr><td>$</td><td>String</td><td>a single value</td></tr>
        <tr><td>@</td><td>List</td><td>an enumerable set of either Lists or Strings</td></tr>
        <tr><td>%</td><td>Map</td><td>a set of key/value pairs with values being a String, List, or Map</td></tr>
    </table>
    <p>
        String variables are the most common, and are used about anywhere. Whenever you reference a string variable within another
        block or statement, it is automatically replaced with the value. You can escape this with the grave apostrophe 
        (<code>`</code>) character.
    </p>
    <tab-block>
        <tab name="Visual Editor"><img class="screenshot" src="/resources/documentation/otter/variable-pic.png" alt="Setting a Variable in Otter" /></tab>
        <tab name="Text Editor (OtterScript)"><img class="screenshot" src="/resources/documentation/otter/variable-text.png" alt="Setting a Variable in Otter" /></tab>
        <tab name="Execution Log"><img class="screenshot" src="/resources/documentation/otter/variable-log.png" alt="Setting a Variable in Otter" /></tab>
    </tab-block>

    <p>
        Loop variables are used much less frequently, primarily as the source of a 
        <a href="/docs/executionengine/otterscript/statements-and-blocks/loop">Loop Block</a>.
    </p>
    <p>
        Map variables are pretty rare, and are only used in operations needing an arbitrary list of key/value pairs
        (like the <code>HTTP::Post</code>) or in other really advanced scenarios.
    </p>

	<h2 id="scoping" data-title="Runtime Variable Scoping">Runtime Variable Scoping</h2>
	<p>
        When you create a runtime variable with the <a href="/docs/executionengine/otterscript/statements-and-blocks/other-statements"><b>Set Variable Value</b></a> statement, that variable will
        be accessible in the current and nested blocks. For example:
	</p>
    <tab-block>
        <tab name="Visual Mode"><img class="screenshot" src="/resources/documentation/otter/variable-nested-pic.png" alt="Setting a Nested Variable in Otter" /></tab>
        <tab name="Text Mode (OtterScript)"><img class="screenshot" src="/resources/documentation/otter/variable-nested-text.png" alt="Setting a Nested Variable in Otter" /></tab>
        <tab name="Execution Log"><img class="screenshot" src="/resources/documentation/otter/variable-nested-log.png" alt="Setting a Nested Variable in Otter" /></tab>
    </tab-block>
	<p>
		While setting both runtime and <a href="/docs/buildmaster/global-components/configuration-variables" target="_blank">Configuration Variables</a> may lead to confusion if over used it does allow for greater re-use of <a href="/docs/buildmaster/core-concepts/deployment-plans" target="_blank">plans</a> and templates by allowing the same plan or template to used at different development environments where things like certificates, keys, and data might <em>need</em> to be different for testing.
	</p>

    <h2 id="relation" data-title="Relation to Configuration Variables">Relation to Configuration Variables</h2>
    <p>
        When a string variable is referenced in your plan, the execution engine first checks to see if there is a
        runtime variable with that name in the current scope. If not, then a configuration variable with that name
        is retrieved.  We generally don't recommend doing this, as it may get quite confusing if others are trying
        to understand your plan.
    </p>
	
    <h2 id="variable-functions" data-title="Variable Functions">Variable Functions</h2>
    <p>
        You may have seen expressions like <code>$PathCombine($RootPath,Accounts)</code> <a href="/support/tutorials" target="_blank">used in examples</a>; these are
        variable functions, which take in a number of parameters and return a value.
        All of the "built-in variables" like <code>$WorkingDirectory</code>, <code>$EnvironmentName</code>, and
        <code>@AllServers</code> are implemented as variable functions.
    </p>
    <p>
        You can create configuration or runtime variables with the same name of a variable function, but we don't recommend
        it because it can get quite confusing if others are trying to understand your plan. If there is a variable of
        the same name, that value will be used instead, unless you explicitly reference the
        parameter list (such as <code>$EnvironmentName()</code>).
    </p>
    <p>
        Variable functions are extensible, so you can write your own with a <a href="/docs/buildmaster/administration/extensions" target="_blank">BuildMaster Extension</a>.
    </p>		
		
</body>
</html>