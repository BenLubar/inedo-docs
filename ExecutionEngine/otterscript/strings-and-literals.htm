<html>
<head>
    <title>Strings &amp; Values</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="otterscript,variables,otter,buildmaster,hedgehog" />
    <meta name="show-headings-in-nav" content="true" />
    <meta name="sequence" content="30" />
</head>
<body>
    <style>
        .upcoming.proposed::before{
            content:'proposed:'
        }
    </style>
    <p>
        Values -- i.e. the desired states, settings, and values of the things that need to be configured on servers --
        are a first-class concept in OtterScript, and are represented through a <em>literal expression</em>. There are
        three types of literal expressions:
    </p>
    <ul class="docs">
        <li><b>Map expression</b> - represents a map, such as %( name: value, name2: value2 )</li>
        <li><b>Vector expression</b> - represents a list/vector, such as @( value1, value2, value3 )</li>
        <li><b>Scalar expression</b> - all other literal expressions</li>
    </ul>
    <p>
        The <a href="/docs/executionengine/reference/formal-grammar">formal grammar</a> describes <em>exactly</em> how map and vector expressions should
        be formated and where they may be used. 
    </p>
    <h2 id="literal-evaluation" data-title="Automatic Variable Expansion">Automatic Variable Expansion</h2>
    <p>
        All statements persist their contained data and values as a string, and it's only during execution of the statement
        that the expression is <em>evaluated</em>. It's during this evaluation that variables values are expanded. 
    </p>
    <p>
        When a literal expression is evaluated, any contained scalar variable expressions (e.g. <code>$SomeVariable</code>)
        are replaced with the corresponding value, using the following method:
    </p>
    <ul class="docs">
        <li>If the expression represents a function (e.g. <code>$SomeFunc()</code>), then a variable function with that name
        is invoked using the specified parameters</li>
        <li>
            Otherwise, a value is located in this priority
            <ol>
                <li>Runtime variable</li>
                <li>Configuration variable</li>
                <li>Variable function</li>
                <li>Raft variable</li>
            </ol>
        </li>
    </ul>
    <p>
        When a function is invoked, the parameters are evaluated prior to execution; for example, <code>$PathCombine($a,$b)</code> 
        will first resolve $a and $b before invoking PathCombine
    </p>
    <h3 id="list-map">Indexed List or Map Expansion</h3>
    <p>
        Because map and list expressions represent multiple values, they cannot be automatically expanded into a single value (i.e. a string).
        You can, however, use an <em>indexing expression</em> to identify a single value to expand within a map or a list. This
        works a lot like arrays or property indexers in other programming languages.
    </p>
    <p>OtterScript supports both bracket-based indexing and dot-based indexing, and lists indexes are 0-based integers. For example:</p>
    <ul class="docs">
        <li><code>@MyList[3]</code> - will expand to the forth item in the list, or an error if @MyList doesn't have at least four items</li>
        <li><code>@(1,2,3)[zero]</code> - will result in a runtime error, because <code>zero</code> is not an non-negative integer</li>
        <li><code>@(MyList)[$i]</code> - will expand to whatever $i expands to, or a runtime error if $i is not a positive integer</li>
        <li><code>%MyMap[hdars]</code> - will expand to the value with a key of <code>hdars</code>, or result in a runtime error if that value doesn't exist or is not a scalar value</li>
        <li><code>%Config.Sys.Drive</code> - will expand to the <code>Drive</code>-keyed value in the <code>Sys</code>-keyed map within the <code>Config</code> map</li>
    </ul>

    <h4>Using Indexing in a String</h4>
    <p>
        Because the <code>@</code> and <code>%</code> characters are only recognized as variable indicators when used at the
        beginning of a literal expression, they must be wrapped with the nested evaluate expression when evaluation is intended
        anywhere else in the string:
    </p>
    <ul class="docs">
        <li><code>string with @var[1] value</code> - will <b>not</b> expand the <code>@var[1]</code> expression</li>
        <li><code>string with $(@var[1]) value</code> - <b>will</b> expand the <code>@var[1]</code> expression</li>
    </ul>
    <p>
        This additional syntax means that @ and % characters do not need to be explicitly escaped; since indexing was added
        to OtterScript, this was required to maintain compatibility with older scripts. It is also practical, as @ and % characters
        are not that uncommon in text.
    </p>

    <h3 id="escaping-expansion">Escaping Expansion</h3>
    <p>The grave apostrophe (<code>`</code>) serves as an escape character. The following can be escaped:</p>
    <ul class="docs">
        <li>Variable indicator -<code>`$</code>, <code>`@</code>, <code>`%</code></li>
        <li>Whitespace - <code>`n</code>, <code>`t</code>, <code>`r</code></li>
        <li>Escape character - <code>``</code></li>
    </ul>
    <p>
        If any other character follows the grave apostrophe, then it will still be considered an escape character, but may raise a warning during compilation.
    </p>
    <h3 id="additional-expansion">Additional Expansion</h3>
    <p>
        The <code>$Eval(&laquo;arg&raquo;)</code> variable function will perform an additional variable expansion using the method described above
        for <code>&laquo;arg&raquo;</code>.
    </p>
    <div class="upcoming proposed">
        <h3>Avoid Expansion Altogether</h3>
        <p>
            Sometimes, it's desirable to avoid expansion all together, without needing to escape using the grave apostrophe. Some languages perform
            this with an additional decorator on a string literal, such as the <code>@</code> before a string in C#.
        </p>
        <p>
            We're considering adding this using a <code>/literal</code> decorator at the <em>end</em> of a quoted or swim string. For example,
            <code>"Not $escaped"/literal</code>.
        </p>
        <p>
            If you have any interest in this, please <a href="/ticket/subit">submit a ticket</a> with how you would plan to use this, and 
            how it would be helpful; this is currently tracked as <a href="https://inedo.myjetbrains.com/youtrack/issue/IEE-20">IEE-20</a>,
            and we will link your ticket and seek to prioritize this.
        </p>
    </div>

    <h2 id="string-syntax" data-title="String Literals">String literal syntaxes</h2>
    <p>To help contain values without worrying about escaping, OtterScript offers several syntaxes for string literals:</p>
    <table>
        <tr>
            <td>Implicit</td>
            <td>any characters except newlines and the expected delimiter (which can be a comma, right-parenthesis, right-brance, or semi-colon, depending on context); surrounding whitespace is always trimmed</td>
        </tr>
        <tr>
            <td>Quoted</td>
            <td>any characters surrounded by a pair of single-or double-quotes; these cannot contain a newline character, and escaping sequences (such as \n\t) are not used</td>
        </tr>
        <tr>
            <td>Swim</td>
            <td>any characters surrounded by two identical fish sentinels; these are a pair of greater-than characters containing zero to five non-greater-than characters (&gt;&gt;, &gt;--=&gt;, &gt;==8&gt;); although not required, it's advised to make your fish sentinels look like fish as much as possible, as otters love fish</td>
        </tr>
    </table>

    <p>Following are some example strings:</p>

    <table>
        <tr><td><code>this is just an implicit string</code></td></tr>
        <tr><td><code>"Quote string, with double quotes."</code></td></tr>
        <tr><td><code>'A "quoted" string with single quotes.'</code></td></tr>
        <tr><td><code>An "implicit" string because it doesn't start with a quote</code></td></tr>
        <tr>
            <td>
<pre>>> this is a swim string
that can span multiple
lines, and contain "any' thing, except the 
closing fish >>
</pre>
            </td>
        </tr>
        <tr>
            <td>
<pre>>==8>
this is a more fish-looking sentinel; note that it
can this can contain >>, >--=>, or even a shark (>==|:>) 
because the surrounding fish have ==8 inside
>==8></pre>
            </td>
        </tr>
    </table>

    <h2 id="best-practices" data-title="Best Practices">Notes and Best Practices</h2>
    <p>
        Note that variable expansion gives the <em>appearance</em> of assigning variables to operation parameters; this is not the case.
        It simply is a literal expression that will utilize variable expansion at runtime. As such, there is no need for things like
        string concatenation: just put the variables next to each other in the desired manner (e.g. <code>http://${host}/${path}</code>), and they will be evaluated
        at runtime as expected.
    </p>
    <p>
        In general, describing your configuration with implicit strings will makes them easier to read and follow. We recommend using
        implicit strings when possible, quoted strings when you require a delimiter or non-trimmed whitespace, and fish strings when
        creating files or doing script-embedded operations.
    </p>
</body>
</html>
