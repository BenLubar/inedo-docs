<html>
  <head>
    <title>Private Docker Registry</title>
      <meta name="subtitle" content="Private Docker Registry" />
      <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
      <meta name="keywords" content="proget,feeds,docker" />
      <meta name="sequence" content="100" />
  </head>
  <body>
     <p>
            Using ProGet's Docker Registries, you can manage your own and third-party Docker images in a uniform manner, while defining fine-grained access control. ProGet works transparently with the Docker client, with images created internally or downloaded from remote Docker resources such as Docker Hub.
     </p>
     <p>
            Internally, Docker registries are represented as feeds, which means:
     </p>
     <ul class="docs">
         <li>feed-scoped privileges can be applied on Docker registries</li>
        <li>you can configure Amazon S3 and Azure blob storage </li>
         <li>the Docker registry name cannot be the same as another feed name</li>
                
     </ul>
     <h2>
         Multiple Docker Registries
     </h2>
     <p>
            ProGet lets you define as many Docker registries as you wish. This enables you to manage each project in a distinct registry and exercise better access control over your Docker images. 
     </p>
     <h2>
            Creating and using a Docker Registries in ProGet 
     </h2>
     <div class="attention technical">
            <img src="/resources/images/icons/technical.png" />
            <p>
                    Docker requires an SSL connection, so you will need to configure ProGet to use IIS rather than its integrated web server, and configure the web site to use SSL (https). See <a href="https://docs.docker.com/registry/insecure/">testing an insecure registry</a> in the Docker documentation for some help on configuring Docker to use a self-signed certificate.
            </p>
        </div>
        <p>
                To create a Docker registry in ProGet, go to Containers > Create New Docker Registry, then enter a container name.    
        </p>

          <h2 id="setup-docker">Setting up Docker Client</h2>
			<p>
				ProGet uses token-based authentication, which means you will need to use <a href="https://github.com/moby/moby/blob/master/CHANGELOG.md#1110-2016-04-13" target="_blank">Docker 1.11.0</a> or newer.
                </p>

          <p>
              First, you will need to log in to Docker. To do this, use the following command,
              where <i>progetsv1</i> is the name of your ProGet server:
          </p>
          <pre>[~]$ sudo docker login progetsv1</pre>
          <p>
              As mentioned previously, Docker needs an SSL connection, so this operation will fail
              if ProGet is only accessible via http.
          </p>

          <h2 id="publish-image">Publishing an Image</h2>
          <p>
              To publish a Docker image to ProGet, you first need to <b>tag</b> the image using
              Docker in a special format. For example, if we have an image locally called <code>ubuntu:trusty</code>,
              we need to retag it as follows:
          </p>
          <pre>[~]$ sudo docker tag ubuntu:trusty progetsv1:443/dmc/ubuntu:trusty</pre>
          <p>
              Or, more generally, the format is: <i>server/feed/image:tag</i>.
          </p>
          <p>
              Once tagged, the image can now be pushed to ProGet:
          </p>
          <pre>[~]$ sudo docker push progetsv1:443/dmc/ubuntu:trusty</pre>
          <h3>
              Pulling in Images
          </h3>
          <p>
              You can then pull the image in the same fashion:
          </p>
          <pre>[~]$ sudo docker pull progetsv1:443/dmc/ubuntu:trusty</pre>
      <h2>
          Implementation Details: Registries, Repositories, and More
      </h2>
      <p>
            While Docker users rarely need to worry about the implementation details, these may become important when you manage and troubleshoot a private Docker registry. 
      </p>
      <p>
            First, makes sure to familiarize yourself with the following Docker terminology and concepts.
      </p>
      <table>
            
            <tbody>
                <tr>
                    <td>Repository</td>
                    <td>a named collection of <em>images</em> and <em>tags</em></td>
                  
                </tr>
               
                <tr>
                    <td>Registry</td>
                    <td>	a host or server that stores Docker <em>repositories</em></td>
                    
                </tr>
                <tr>
                        <td>Image</td>
                        <td>a <em>manifest</em> and series of <em>layers</em> described in the manifest; this is assembled by the Docker client and instantiated as a <em>container </em></td>
                       
                    </tr>
                    <tr>
                            <td>Layer</td>
                            <td>either a <em>digest</em> that references a <em>blob</em> stored in the same registry, or a <em>url</em> where a blob should be downloaded</td>
                            
                        </tr>
                        <tr>
                                <td>Blob</td>
                                <td>the low-level storage mechanism used for <em>layers</em> and <em>manifests</em>, this is a collection of binary data that is referenced by its <em>digest (hash)</em></td>
                               
                            </tr>
                            <tr>
                                    <td>Digest (hash)</td>
                                    <td>the identification of a particular blob; this is just the hash of its contents</td>
                                 
                                </tr>
                                <tr>
                                        <td>Container</td>
                                        <td>a runtime instance of an <em>image</em></td>
                                       
                                    </tr>
                                    <tr>
                                            <td>Tag</td>
                                            <td>a human-readable alias of a <em>digest (hash)</em> that generally used to version <em>images</em> within a <em>repository</em></td>
                                           
                                        </tr>
                                        <tr>
                                                <td>Manifest</td>
                                                <td>a JSON-based description of an <em>image</em> and the <em>layers</em> it contains; this is referenced by its <em>digest</em> and stored as a <em>blob</em></td>
                                               
                                            </tr>
                                            <tr>
                                                    <td>Dockerfile</td>
                                                    <td>a file written in a procedural language that is used by the Docker client to construct an <em>image</em>; essentially, this is used to generate a <em>manifest</em> </td>
                                                   
                                                </tr>                          
                                    
            </tbody>
        </table>
<p>
        Conceptually, a registry is like a feed, a repository is like a package name, and an image is like a specific package version. However, the differences are a bit more nuanced, so make sure to also read <a href="/support/documentation/proget/docker/packages-vs-containers">Packages vs Containers</a>.
</p>

<h3>Chunked and Monolithic Uploading </h3>
<p>To support uploading large files over a single HTTP request, the Docker client will generally use a <a href="https://github.com/docker/distribution/blob/master/docs/spec/api.md#chunked-upload">chunked upload process</a>: send an upload initiation, a series of chunks (partial blob files), then an upload completion. ProGet supports this process, and assembles chunks as specified by the Docker API.
</p>

<p>During the "FeedCleanUp" scheduled job, ProGet will purge incomplete uploads (i.e. chunks that were sent without an upload completion).
</p>
<h3>Garbage Collection</h3>
<p>
Unlike packages, a Docker image is not self-contained: it is a reference to a manifest blob, which in turn references a number of layer blobs. These layer blobs may be referenced by other manifests in the registry, which means that you can't simply delete referenced layer blobs when deleting a manifest blob.
</p>
<p>This is where garbage collection comes in; it's the process of removing blobs from the package store when they are no longer referenced by a manifest. ProGet performs garbage collection on Docker registries through the "FeedCleanUp" scheduled job.
</p>
<h2>Private Registry Limitations</h2>

<p>Docker is designed to tightly integrate with the publicly-hosted hub.docker.com. Private registries are supported to some extent, but the Docker client and related tooling always assume you will be using their public registry, or at the very least, the official private <a href="https://docs.docker.com/registry">Docker Registry</a> that they built and support. 
</p> 
  </body>
</html>