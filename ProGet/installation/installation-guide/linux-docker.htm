<html>
  <head>
    <title>Linux Installation Guide</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="proget, installation, linux" />
    <meta name="sequence" content="100" />
      <meta name="subtitle" content="Linux Installation Guide" />

      <style type="text/css">
          .console {
              background-color: #202020;
              color: #EEE;
              font-family: andale mono, lucida console, monospace;
              padding: 15px;
              font-size: 14px;
              border: solid 3px #aaa;
              box-shadow: 2px 2px 3px #666;
              line-height: 1.5em;
              margin: 10px 20px;
              display: block;
          }
      </style>
  </head>
  <body>
      <p>
          ProGet for Linux is available using our official Docker image.
      </p>

      <h2>Prerequisites</h2>
      <p>
          Docker must be installed and the docker daemon running on your server. If you
          don't already have Docker installed, you can get install instructions for
          your specific distro <a href="https://docs.docker.com/engine/installation/#installation">here</a>.
      </p>
      <p>
          Once Docker is up and running, you are ready to continue. Note that Docker
          commands generally have to be issued by members of the docker group or with
          root/sudo privileges, so if you encounter errors with these commands make
          sure your account is in the docker group (<b>adduser myusername docker</b>
          and then log out and back in) or you are issuing them with the appropriate
          sudo/su depending on your configuration.
      </p>

      <h2>Licensing</h2>
      <p>
          You'll need to have a valid license key once you get ProGet up and running.
          You are welcome to use either a license key that you already have,
          or request a new one from <a href="https://my.inedo.com">my.inedo.com</a>.
      </p>

      <h2>Starting the ProGet Docker Image</h2>
      <p>
          We are currently distributing this as a single, self-contained image. To get the image and
          start it, use the <b>docker run</b> command. If you'd like to just get started right away with our
          defaults, you can just use the command below as-is, or continue reading for an explanation
          on the arguments and how to provide additional configuration values.
      </p>
      <pre>
docker network create proget<br />
docker run -d -v /etc/localtime:/etc/localtime:ro -v /var/proget/db:/var/lib/postgresql/data --net=proget --name=proget-postgres --restart=unless-stopped postgres:9.5<br />
docker run -d -v /etc/localtime:/etc/localtime:ro -v /var/proget/packages:/var/proget/packages -v /var/proget/extensions:/var/proget/extensions -p 80:80 --net=proget --name=proget --restart=unless-stopped inedo/proget:latest
      </pre>

      <table style="margin-top: 10px; margin-bottom: 10px;">
          <tbody>
              <tr>
                  <td style="width: 400px;"><code>-d</code></td>
                  <td>
                      Starts the container in detached mode. Without this argument,
                      Docker will block your current terminal session and output
                      ProGet's logs to your terminal.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>-v /etc/localtime:/etc/localtime:ro</code></td>
                  <td>
                      Allows the Docker container to inherit the time zone of the host
                      server.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>-v /var/proget/db:/var/lib/postgresql/data</code></td>
                  <td>
                      Mounts <code>/var/proget/db</code> as the location of PostgreSQL's
                      storage on the host server. You can omit this option if you want
                      Docker to create the volume in <code>/var/lib/docker/volumes</code>
                      with a random name.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>--net=proget</code></td>
                  <td>
                      Putting the containers into a Docker network lets them see each
                      other and prevents other Docker containers from accessing them.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>--name=proget-postgres</code></td>
                  <td>
                      Names the container <code>proget-postgres</code>, which is the default
                      hostname that ProGet connects to on Linux. If you choose a
                      different name or decide to host your database server outside of
                      Docker, you will need to specify a connection string using
                      <code>-e PROGET_DATABASE=</code><code>"Server=host.name;</code> <code>Database=databasename;</code> <code>User Id=username;</code> <code>Password=password;"</code>
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>--restart=unless-stopped</code></td>
                  <td>
                      Tells Docker to restart the container unless it is explicitly
                      stopped using <code>docker stop</code>. This makes the container
                      automatically restart after the host reboots.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>-v /var/proget/packages:/var/proget/packages</code></td>
                  <td>
                      Mounts <code>/var/proget/packages</code> as the location to store ProGet's
                      repository packages. Like the database path, you can change this, but
                      if it is not persisted explicitly, Docker will choose a location
                      that is hard to get to.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>-v /var/proget/extensions:/var/proget/extensions</code></td>
                  <td>
                      Mounts <code>/var/proget/extensions</code> as the location to store ProGet's
                      extensions. Like the database path, you can change this, but
                      if it is not persisted explicitly, you will not be able to install and use
                      any extensions. See the <a href="#limitations">limitations</a> section below.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>-p 80:80</code></td>
                  <td>
                      Exposes TCP port 80 of the container to port 80 of the host, so that
                      browsers can access the ProGet web application. If you don't want to
                      use port 80, you can change the first port number to whatever you
                      would like.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>--name=proget</code></td>
                  <td>
                      Names the container <code>proget</code> so it can be easily referenced
                      using other Docker commands. If you don't specify a name, Docker
                      will generate one for you.
                  </td>
              </tr>
              <tr>
                  <td style="width: 400px;"><code>inedo/proget:latest</code></td>
                  <td>
                      This is the repository and tag for ProGet on Docker Hub. If you want
                      to run a specific version instead of the latest, just replace <code>latest</code>
                      with the appropriate ProGet release number. Note that downgrades will only
                      work if there have been no database schema changes.
                  </td>
              </tr>
          </tbody>
      </table>

      <p>
          When the container is running, you should be able to browse to the ProGet web UI
          on the exposed port.
      </p>

      <h2>Upgrading to a new version</h2>

      <pre>
docker stop proget<br />
docker rename proget proget-old<br />
docker pull inedo/proget:latest<br />
docker run -d --volumes-from=proget-old -p 80:80 --net=proget --name=proget --restart=unless-stopped inedo/proget:latest<br />
docker rm proget-old
      </pre>

      <h2>Troubleshooting</h2>
      <p>
          If you aren't able to browse to the website, here's a few troubleshooting steps
          you can try:
      </p>
      <ol>
          <li>
              Run <code>docker ps</code> - this will display all of the currently running Docker
              containers. If you don't see ProGet listed, then the container isn't running
              and you can issue a <code>docker logs proget</code> command to display the log
              messages from when it last ran; there was most likely some kind of initialization
              error that prevented it from starting up.
          </li>
          <li>
              Run <code>docker logs proget</code> - this will display ProGet's log messages. Look
              for any error or warning messages for clues as to what's wrong.
          </li>
          <li>
              Make sure a firewall on the host server isn't blocking requests on
              the specified port.
          </li>
          <li>
              Run <code>docker restart proget</code> to stop the container and then restart it.
          </li>
      </ol>

      <h2>Stopping the Container</h2>
      <p>
          If you need to stop the ProGet container, the <code>docker stop proget proget-postgres</code>
          command should do it. You can determine if it is running with the <code>docker ps</code>
          command. To start the container after it has been created, use the
          <code>docker start proget proget-postgres</code> command.
      </p>

      <h2 id="limitations">Limitations and Known Issues</h2>
      <p>
          Although ProGet's codebase is largely platform-independent, there are a few platform-specific
          features from the Windows version that had to be omitted:
      </p>
      <ul class="docs">
          <li>
              <b>Extension Management</b> - Extensions can be installed from the ProGet web application just
              like on Windows installations, but the hosting Docker container must be manually restarted
              after the extensions are installed using a <code>docker restart proget</code> command.
          </li>
          <li>
              <b>NuGet Source Server</b> - This requires the pdbstr.exe Windows binary, which will
              not run on Linux short of some kind of emulation layer like Wine.
          </li>
      </ul>
      <p>
          You may also encounter random bugs as the entire database layer has been ported from
          SQL Server to PostgreSQL. We're pretty sure we've discovered and fixed most of these issues,
          but if you encounter any please be sure to <a href="/contact">let us know</a>.
      </p>
  </body>
</html>
