<html>
<head>
    <title>Symbol and Source Server</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="proget, feeds, packages, symbols, source, nuget, visual-studio-online" />
    <meta name="sequence" content="30" />
</head>
<body>
    <style type="text/css">
        .red { color: #990000; }
        .green { color: #009900; }
        .checkbox { margin-left: 75px; }
    </style>

    <h2>Symbol and Source Server</h2>
    <p>
        A NuGet feed in ProGet may be configured as a Symbol/Source server compatible with
        debuggers such as Visual Studio and WinDbg. The following is supported by the ProGet symbol server:
    </p>

    <p class="checkbox green">&#9745; <strong>Microsoft PDB format (C/C++, .NET)</strong></p>
    <p class="checkbox green">&#9745; <strong>Source server</strong></p>
    <p class="checkbox green">&#9745; <strong>Portable PDB format (.NET)</strong></p>
    <p class="checkbox red">&#9746; <strong>PDBs in connector packages</strong></p>
    <p class="checkbox red">&#9746; <strong>Source server for <a href="/support/documentation/proget/installation/installation-guide/linux-docker">ProGet on Linux</a></strong></p>

    <!-- [ ] = &#9744-->
    <!-- [/] = &#9745-->
    <!-- [X] = &#9746-->

    <h3 id="access">Accessing Symbols</h3>
    <p>
        When the Symbol Server is enabled, any symbols files stored in local
        Feed packages will be accessible via the symbol server URL:<br />
    </p>
    <p class="info"><strong><code>http://&laquo;proget-server&raquo;/symbols/&laquo;Feed&raquo;</code></strong></p>

    <h3 id="packages">Symbol Packages</h3>
    <p>
        ProGet supports using NuGet symbol packages built with the <b>-Symbols</b>
        argument. These symbol packages are nothing more than a standard NuGet package
        with .pdb files and possibly source files included, and they have a
	<i>.symbols.nupkg</i> or <i>.snupkg</i> file extension by convention. NuGet produces two packages
        (one with symbols and one without) because one is intended to be pushed to
        NuGet.org, while the other is intended to be pushed to a symbol feed.
    </p>
    <p>
        Because ProGet integrates symbols in all of its NuGet feeds, having two packages
        is not necessary and is actually counterproductive. Symbol packages only
        differ from "normal" packages by convention, so attempting to push both to a
        ProGet feed will result in a race condition - whichever package is pushed
        "last" will overwrite the original one.
    </p>
    <p>
        To summarize, <b>
            push only the symbol package to your ProGet feed if you
            intend to use the symbol server
        </b>. To prevent symbols from being downloaded
        with the NuGet package, see the <i>Strip symbol files from packages downloaded from this feed</i> option
        on the Manage Feed page under <i>Symbol Server</i> settings.
    </p>

    <h2 id="debug-internal-nuget-packages">Debug Into Internal NuGet Packages</h2>
    <p>
        To take full advantage of ProGet's symbol/source server, the published NuGet package must include symbol (pdb)
        files for every debuggable assembly, and the source files must be included in the /src/ folder of the
        package. See the <a href="http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-symbol-package">NuGet documentation</a>
        on building a symbol package for detailed information.
    </p>

	<div class="attention technical">
	<p>
		ProGet will index and return portable PDB files as well as the traditional Microsoft PDB files,
		but portable PDB files are <em>not</em> transparently rewritten to enable them to work with
		source code in the embedded NuGet package. If you would like to debug into the source code associated
		with a portable PDB file, consider using a build tool such as <a href="https://github.com/ctaggart/SourceLink">SourceLink</a>
		to embed source file URLs (or the files themselves) during compilation.
	</p>
	<p>
		If you would like support for rewriting portable PDB files in the same way ProGet handles
		Microsoft PDB files, <a href="/contact">let us know</a>!
	</p>
	</div>

    <h4 id="configure-proget">Configuring ProGet</h4>
    <p>
        In order for ProGet to serve symbols for a particular NuGet feed, it must be configured to do so.
        Visit the Manage Feed page, and ensure that the options under Symbol Server are correctly checked, while noting the
        URL of the feed's symbol server to be used within Visual Studio:
    </p>
    <div>
        <img src="/resources/documentation/proget/symbols/feed-configuration.png" alt="Symbol and Source feed" class="screenshot" />
    </div>
    <h4 id="verify-proget">Verifying Indexed Symbols</h4>
    <p>
        Once a package with symbols is uploaded to the feed, browsing to the Package Details page will indicate whether symbols have been indexed
        and whether the package contains sources:
    </p>
    <div class="upcoming v4">
        <img src="/resources/documentation/proget/symbols/package-details.png" alt="Package details" class="screenshot" />
    </div>
    <p>
        You can download the package and inspect it yourself to verify this using the <em>Download Package with Symbols</em> link (which appears if
        the feed is configured to strip symbols).
    </p>

    <h4 id="configure-vs">Configuring Visual Studio</h4>
    <h5>Enable Symbol Server Support</h5>
    <p>
        In order to debug into NuGet package libraries, Visual Studio must be configured to use ProGet as a symbol server. Select
        <strong>Debug</strong> &gt; <strong>Options...</strong> from the menu bar, then browse to <strong>Debugging</strong> &gt; <strong>Symbols</strong>
        in the tree menu. Add the symbol server URL found on the Manage Feed page earlier, and specify a Symbol Cache Directory. By default Visual
        Studio will use <code>%LOCALAPPDATA%\Temp\SymbolCache</code>, but you may specify any path.
    </p>
    <img src="/resources/documentation/proget/symbols/enable-symbol-server.png" alt="Package details" class="screenshot" />
    <h5>Enable Source Server Support</h5>
    <p>
        To configure source server support, browse to <strong>Debugging</strong> &gt; <strong>General</strong>
        in the debugging options tree menu, and make sure the following settings are checked/unchecked as follows:
    </p>

    <p class="checkbox">&#9744; <strong>Enable Just My Code</strong></p>
    <p class="checkbox">&#9745; <strong>Enable source server support</strong></p>

    <p>Additionally, you may have to uncheck:</p>

    <p class="checkbox"> &#9744; <strong>Enable .NET Framework Source Stepping</strong> </p>

    <p>
        in some cases. The settings should look like the following:
    </p>
    <img src="/resources/documentation/proget/symbols/debug-settings.png" alt="Debug settings" class="screenshot" />

    <h4>Testing the Configuration</h4>
    <p>
        A simple way to test out the configuration is to create a console application that consumes the NuGet package with symbols,
        write some throwaway code that you know will throw an exception, then click the Start button in Visual Studio to begin debugging:

    </p>
    <img src="/resources/documentation/proget/symbols/code1.png" alt="Throw code" class="screenshot" />
    <p>
        If everything is configured correctly, Visual Studio will attempt to load symbols locally, then query the ProGet symbol server
        if they cannot be found, and the exact line that throws the exception will become highlighted:
    </p>
    <img src="/resources/documentation/proget/symbols/code2.png" alt="Source server code" class="screenshot" />

    <h4>Troubleshooting</h4>
    <p>
        In some cases, the symbol server will fail for any number of reasons, the most common being misconfiguration. To view the
        PDBs that Visual Studio has loaded, select the  <strong>Debug</strong> &gt; <strong>Windows</strong> &gt;
        <strong>Modules</strong> menu option while debugging, and find the desired DLL in the list. The symbol status will appear,
        along with the version and path to both the DLL and the downloaded symbols.
    </p>
    <img src="/resources/documentation/proget/symbols/modules.png" alt="Modules window" class="screenshot" />
    <p>
        Whether the symbols loaded or not, you can right-click on the DLL and select "Symbol Load Information..." to view the
        diagnostic messages associated with the symbol server for that library.
    </p>
    <img src="/resources/documentation/proget/symbols/symbol-load-info.png" alt="Modules window" class="screenshot" />
    <p>
        The hex string in the file path should also start with the GUID listed in ProGet:
    </p>
    <img src="/resources/documentation/proget/symbols/hex.png" alt="Modules window" class="screenshot" />
    <div class="upcoming v4">
        <img src="/resources/documentation/proget/symbols/guid.png" alt="Modules window" class="screenshot" />
    </div>
    <h5>Common Errors</h5>
    <p>
        The most common errors (based on previous support inquiries) include:
    </p>
    <ul class="docs">
        <li>Using the wrong URL, e.g. <span class="red">http://&laquo;proget-server&raquo;/<strong>nuget</strong>/&laquo;feed-name&raquo;</span> instead of the
        correct <span class="green">http://&laquo;proget-server&raquo;/<strong>symbols</strong>/&laquo;feed-name&raquo;</span></li>
        <li>Pushing both NuGet packages (with and without symbols)</li>
        <li>Trying to consume symbols for connector packages (which is not supported, workaround is to pull packages locally or use a separate feed for symbols)</li>
        <li>Not including source files under the /src/ directory at the root of the .nupkg file</li>
    </ul>

</body>
</html>
