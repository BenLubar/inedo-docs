<html>
<head>
    <title>Visual Studio Extension (.vsix)</title>
    <meta name="subtitle" content="VSIX" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="proget,feeds,vsix" />
    <meta name="sequence" content="150" />
</head>
<body>
	<p>
		A VSIX feed in ProGet stores Visual Studio extensions, which can then be
		installed directly from Visual Studio.
	</p>

	<h2 id="vsix-specifics">VSIX Feed Specifics</h2>
	<p>
		Visual Studio does not allow disabling or removing the standard extension
		gallery, and this gallery actually uses an internal API that is different
		from the documented Atom VSIX feed ProGet exposes, so currently a connector
		to the Visual Studio Gallery cannot be created in ProGet. However, connectors
		to other Atom VSIX feeds are supported.
	</p>
	<p>
		There is no official API defined by VSIX for adding packages. If you would like
		to upload a .vsix extension from a tool or script, you can simply PUT or POST
		the extension to the feed API endpoint URL.
	</p>

	<pre># PowerShell example
Invoke-RestMethod https://proget.example.com/vsix/FeedName `
	-InFile .\MyExtension.vsix `
	-Headers @{"Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("api:xxxxxxxxxxxxxx"))}</pre>

	<p>
		Note that PowerShell does not support TLS 1.2 (defined by
		<a href="https://tools.ietf.org/html/rfc5246">RFC 5246</a>, August 2008)
		by default. If your server does not allow TLS 1.0 connections
		(required for PCI compliance since June 2018), you will need to enable
		TLS 1.2 before running the above command.
	</p>
	<p>
		See <a href="/support/kb/1161/tls-v12-configuration-and-connection-errors">KB#1161</a> for instructions on how to enable TLS 1.2.
	</p>
</body>
</html>