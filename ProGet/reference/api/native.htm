<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Native API Reference</title>
    <meta name="subtitle" content="Native API Reference" />
    <meta name="show-headings-in-nav" content="true" />
    <meta name="keywords" content="proget,api" />
    <style type="text/css">
        th {
            font-weight: normal;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="attention technical">
        <p>
            The other endpoints should be used instead of the Native API Methods when possible, as they are much easier to use and will likely not change from version-to-version.
        </p>
    </div>

    <h2 id="API-key-usage" data-title="API Key Usage"> API Usage</h2>
    <p>
        All of these methods require that an API Key with Native API Access is passed into each request; see <em>Using API Keys</em> for more information.
    </p>
    <h2 id="method-listining" data-title="Method Listing"> Method Listing</h2>
    <p>
        The Native API Methods are automatically documented by a special page in the software. To see the API Methods for your specific version, go to Administration > Reference > API Methods, or directly visit <code>http://your-proget-installation/reference/api</code> in your installation.
    </p>
    <h2 id="using-native-api" data-title="Using the Native API"> Using the Native API</h2>

    <p>
        There are three interfaces for the native API: JSON, SOAP, and SQL. The native API interfaces take the same parameters and return the same data, so you should use the most convenient one for your programming environment.
    </p>


    <h3 id="JSON-based" data-title="JSON-based Access">JSON-based Access </h3>
    <p>
        The JSON interface for the native API can be used by any program that can perform HTTP requests and decode JSON.
        For example, here is a way to create a feed:
    </p>
    <p class="info"><pre>
URL:
http://feeds.fd.local:2000/api/json/Feeds_CreateFeed

Header:
Content-Type: application/json

Body:
{
"Feed_Name" : "MyNewNuGetFeed",
"FeedType_Name" : "nuget",
"API_Key" : "&laquo;api-key&raquo;"
}
</pre></p>
    <p>
       You can also use querystrings with the JSON-based API. To delete a package license and all associated rules, we need to perform two requests:
    </p>
    <p class="info">
        GET or POST <span style="opacity: 0.5">/api/json/</span><b>Licenses_GetLicenses</b>?key=&laquo;api-key&raquo;
    </p>
    <p>
        The first request gives us a JSON array containing JSON objects with properties of licenses in ProGet.
        Each license is uniquely identified with a <code>License_Id</code>, which we will feed into the next request:
    </p>
    <p class="info">
        POST <span style="opacity: 0.5">/api/json/</span><b>Licenses_DeleteLicense</b>?key=&laquo;api-key&raquo;&amp;License_Id=&laquo;application-id&raquo;
    </p>
    <p>
        The response contains no data, as it's just a delete, and the built-in reference documentation indicates no return.
    </p>


    <h3 id="SOAP-based" data-title="SOAP-based Access">SOAP-based Access</h3>
    <p>
        The SOAP interface for the native API is useful for .NET programmers.
        Visual Studio can automatically generate code to connect to a SOAP API.
        To do this, add a <strong>Service Reference</strong> to your project with the URL <code>http://your-proget-installation/api/soap</code>.
    </p>
    <h3>Example from BuildMaster</h3>
    <p>
        The following example is for <a href="https://inedo.com/buildmaster">BuildMaster</a>, but the concepts are identical in ProGet.
    </p>
    <div>
        <img class="screenshot" src="/resources/tutorials/native-changescripts/soap-reference.png" alt="Adding a Service Reference" />
    </div>
    <p>
        Here is an example of code that interacts with the SOAP API:
    </p>
<pre class="tutorial-code">using System;
using System.Data;
using System.Linq;

namespace SoapApiExample
{
static class Program
{
    const string APIKey = "&laquo;api-key&raquo;";
    const string ApplicationName = "&laquo;application-name&raquo;";

    static void Main(string[] args)
    {
        using (var client = new buildmaster.ApiServiceSoapClient("ApiServiceSoap"))
        {
            var applicationId = (from app in client.Applications_GetApplications(APIKey, null, null).AsEnumerable()
                                 where string.Equals(app.Field&lt;string&gt;("Application_Name"), ApplicationName, StringComparison.OrdinalIgnoreCase)
                                 select app.Field&lt;int&gt;("Application_Id")).First();

            var releases = from script in client.DatabaseChangeScripts_GetChangeScripts(APIKey, applicationId, null, null, null).AsEnumerable()
                           let s = new
                           {
                               Release_Number = script.Field&lt;string&gt;("Release_Number"),
                               Script_Name = script.Field&lt;string&gt;("Script_Name")
                           }
                           group s by s.Release_Number;

            foreach (var scripts in releases)
            {
                Console.WriteLine($"Release {scripts.Key}");
                foreach (var s in scripts)
                {
                    Console.WriteLine(s.Script_Name);
                }
                Console.WriteLine();
            }
        }
    }
}
}
</pre>


    <h3 id="SQL-based" data-title="SQL-based Access">SQL-based Access</h3>
    <p>
        The SQL interface for the native API is useful for one-off applications because the code can run directly in the database, saving you the trouble of writing a full program.
    </p>
    <p>
        The SQL interface also has access to some procedures not available in the JSON or SOAP interfaces.
        These internal procedures are not supported, but you may find them useful when writing a script.
        Additionally, because it operates directly on the database, the SQL interface is not restricted to procedures.
        In some cases, it may be easier to write one large query instead of many smaller ones.
    </p>
    <p>
        Despite the increased power (and therefore danger) of the SQL interface, it can be used in the same way as the JSON or SOAP interfaces:
    </p>
    <pre class="tutorial-code">DECLARE @Application_Id INT

SELECT @License_Id = [License_Id] FROM [Licenses] WHERE [External_Id] = '&laquo;MIT, etc.&raquo;'

EXEC [Licenses_DeleteLicense] @License_Id = @License_Id
</pre>


</body>
</html>