<html>
<head>
    <title>Universal Packages</title>
    <meta name="subtitle" content="Universal Package Format" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="proget, universal-packages" />
    <meta name="sequence" content="20" />
    <meta name="show-headings-in-nav" content="true" />
</head>
<body>

    <p>
        There's not much to a universal package file; at a minimum it:
    </p>
    <ul>
        <li>is a ZIP archive format with a <code>.upack</code> file extension</li>
        <li>has a <a href="#manifest">manifest file</a> at the root level of archive named <code>upack.json</code> with a few required field</li>
        <li>contains any number of files in the <code>/package</code> directory; these files are the files that will get "unpackaged" by the client or server</li>
    </ul>
    <p>
        You can add any number of files or directories outside of these minimal requirements - and in fact, that's exactly what universal packages are designed for.
    </p>
    <p>
        In the <em>extremely unlikely</em> event that a future version of this specification will require or uses additional files (we can think of absolutely
        no reason this would ever be required), then these will be opt-in and specified using the manifest, or potentially use a <code>.upack2</code> extension.
    </p>

    <h2 id="package-identification" data-title="Package Identification">Package Identification</h2>
    <p>
        A universal package can be uniquely identified it's group, name, and version. These are different properties in the <a href="#manifest">manifest file</a>.
    </p>
    <p>
        In some cases, you will need to refer to a package with a single string. In this case, the group and name are combined into a single string,
        separated by a forward-slash, and the version is followed (separated by a colon).
        If a package is not in a group, then it's considered in the <em>empty</em> group, and that slash is not used. For example:
    </p>
    <ul>
        <li><code>HDARS:1.3.9</code> is version 1.3.9 of the HDARS package (which is in the empty group)</li>
        <li><code>initrode/vendors/abl/ABLast:2.2.1-rc.1</code> is rc.1 prerelease of v2.2.1 of ABLast in the "initrode/vendors/abl" group</li>
    </ul>
    <p>
        You should avoid really generic names for your packages, like "Utils" or "Tool". Instead, consider InitechUtils or InitrodeTool.
    </p>
    <p>
        You may also append a colon and then a hash string to the end of a package. This will be used for verification purposes when possible.
        For example:
    </p>
    <ul>
        <li><code>HDARS:1.3.9:fca66ce2a8ceea2d651eecf2369d4072d1871aec</code></li>
        <li><code>initrode/vendors/abl/ABLast:2.2.1-rc.1:5b31eaa26d0c6e7bb985f740dbceed854293c369</code></li>
    </ul>
    <h2 id="security" data-title="Validation &amp; Security">Validation &amp; Security</h2>
    <p>
        A universal package is meant to be read-only and once created, it's contents and metacontents sealed within the package, untampered.
        But it's a zip file, which means anyone can tamper with the file using nothing more than a zip editor.
    </p>
    <p>
        This is where cryptographic hashing comes in. It is a small string of text that acts as a "thumbprint" of a file and lets you verify that,
        after you've downloaded "Accounts/HDars v1.3.4" from a package source, you can be certain it's the file you expect.
    </p>
    <p>
        Because a package's hash is calculated from the bytes of the package file, it means that it's impossible to store a package's hash inside of that
        package, since changing the package would change it's hash. This is why you must also have a trusted package source tell you the hash of the package.
    </p>
    <p>
        However, a <a href="#manifest">package manifest file</a> may reference other packages' hashes in the <code>dependencies</code> and <code>repackageHistory</code>
        properties.
    </p>
    <h3 id="package-hash-string">Package Hash Strings</h3>
    <p>
        You can use the following rules to determine how to validate a package hash string against a file, or generate a hash of your own package.
    </p>
    <ul>
        <li>40 characters - sha-1</li>
        <li>64 characters - sha-256</li>
        <li>128 characters - sha-512</li>
        <li>73 characters and beginning with "SHA3-256:" - SHA3-256, beginning after the colon</li>
        <li>137 characters and beginning with "SHA3-512:" - SHA3-512, beginning after the colon</li>
        <li>other - invalid or unknown hash</li>
    </ul>
    <p>
        All Inedo-managed UPack tools (including ProGet and Hedgehog) currently only support sha-1.
    </p>

    <h2 id="repackage" data-title="Repackaging &amp; Auditing">Repackaging &amp; Auditing</h2>
    <p>
        Packages work at their best when they are read-only and cryptographically verified, but this means that
        you can't change any of the package metadata (including the version number) without "tampering" with the package.
    </p>
    <p>
        For example, if you have a pre-release package (HDars.Web:1.4.5-rc.2), but just want to "change" the version, then you will have created a new package.
        If you change a different piece of metadata (such as the author name), then you've created a very confusing situation where two different files
        are apparently the same package.
    </p>
    <p>
        This is where repackaging comes in: it's an operation that involves changing a small part of package metadata (such as the version number)  without
        altering the contents, while retaining a "pointer" to the original package inside the newly created package. Of course, this operation can only be performed 
        by a trusted person or service to ensure that the repackaging is securely performed.
    </p> 
    <p>
        The universal packaging manifest file allows for storing a chain of repackaging events that allow you to verify each preceding package.
    </p>

    <h2 id="metacontent" data-title="Package Metacontent">Package Metacontent &amp; Guidance</h2>
    <p>
        Files and directories stored outside of the ZIP archive's <code>/package</code> directory are referred to as <em>metacontent</em>, and the
        <code>upack.json</code> manifest file is the only required metacontent in a package.
    </p>
    <p>
        Unlike actual content, there is no "general purpose" usecase for metacontent. Instead, think of it as a tool to help you build a specification for a package
        format that is based on a universal package. For example, <a href="/romp">romp packages</a> define several metacontent files and folders that are used to
        help install the <code>/package</code> contents.
    </p>

    <h2 id="metadata" data-title="Manifest Specification">Manifest Specification</h2>
    <p>
        The <code>upack.json</code> file is a <a href="http://json.org/">JSON</a> object with the following properties.
    </p>

    <h3>Required Properties</h3>
    <table>
        <thead>
            <tr>
                <th>Property</th>
                <th>Format</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>group</code></td>
                <td>
                    A <em>string</em> of zero to 250 characters: numbers (0-9), upper- and lower-case letters (a-Z), dashes (-), periods (.), forward-slashes (/),
                    and underscores (_); may not start or end with a forward-slash; if not specified, the group name will be considered an empty string.
                </td>
            </tr>
            <tr>
                <td><code>name</code><sup>R</sup></td>
                <td>
                    A <em>string</em> of one to fifty characters: numbers (0-9), upper- and lower-case letters (a-Z), dashes (-), periods (.), and underscores (_).
                </td>
            </tr>
            <tr>
                <td><code>version</code><sup>R</sup></td>
                <td>
                    A <em>string</em> representing a <a href="http://semver.org/spec/v2.0.0.html">SemVer2 Semantic Version</a>; this is a three-part, dot-separated specification.
                </td>
            </tr>
        </tbody>
    </table>

    <h3>Additional Descriptive Properties (Optional)</h3>
    <table>
        <thead>
            <tr>
                <th>Property</th>
                <th>Format</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>title</code></td>
                <td>
                    A <em>string</em> of no more than fifty characters.
                </td>
            </tr>
            <tr>
                <td><code>projectUrl</code></td>
                <td>
                    A <i>string</i> of an absolute url where more about the package can be found
                </td>
            </tr>
            <tr>
                <td><code>icon</code></td>
                <td>
                    A <em>string</em> of an absolute url pointing to an image to be displayed in a UI (at both 64px and 128px);
                    if  <code>package://</code> is used as the protocol, it references a package in image within the package instead
                </td>
            </tr>
            <tr>
                <td><code>description</code></td>
                <td>
                    A <em>string</em> containing any number of characters; these will be formatted as Markdown in the UI.
                </td>
            </tr>
            <tr>
                <td><code>tags</code></td>
                <td>
                    An <em>array of strings</em>, each being one to fifty characters: numbers (0-9), upper- and lower-case letters (a-Z), dashes (-), periods (.), and underscores (_).
                    Tags may not start with a number and must be unique within the array.
                </td>
            </tr>
            <tr>
                <td><code>dependencies</code></td>
                <td>
                    An <em>array of strings</em>, each consisting of a package identification string; this string is formatted as follows:
                    <ul>
                        <li>&laquo;group&raquo;:&laquo;package-name&raquo;</li>
                        <li>&laquo;group&raquo;/&laquo;package-name&raquo;:&laquo;version&raquo;</li>
                        <li>&laquo;group&raquo;/&laquo;package-name&raquo;:&laquo;version&raquo;:&laquo;sha-hash&raquo;</li>
                    </ul>
                    When the version is not specified, the latest is used. If a hash is specified, the client may use it to verify a downloaded package;
                    see <a href="#package-identification">package identification</a>.
                </td>
            </tr>
        </tbody>
    </table>

    <h3>Additional Audit-based Properties (Optional)</h3>
    <table>
        <thead>
            <tr>
                <th>Property</th>
                <th>Format</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>createdDate</code></td>
                <td>
                    A <i>string</i> representing the UTC date when the package was first created, in ISO 8601 format (yyyy-MM-ddThh:mm:ssZ)
                </td>
            </tr>
            <tr>
                <td><code>creatednReason</code></td>
                <td>
                    A <i>string</i> describing the reason or purpose of the creation
                    <br /><br />
                    <i>For example, <a href="/buildmaster">BuildMaster</a> uses</i> <code>{Application Name}</code> <code>v{Release Number}</code> <code>#{Package Number}</code> <code>(ID{Execution-Number})</code>
                </td>
            </tr>
            <tr>
                <td><code>createdUsing</code></td>
                <td>
                    A <i>string</i> describing the mechanism the package was created with; there are no format restrictions, but we recommend treating it like a User Agent string and including the tool name and version
                    <br /><br />
                    <i>For example, BuildMaster uses</i> <code>BuildMaster/5.6.11</code>
                </td>
            </tr>
            <tr>
                <td><code>createdBy</code></td>
                <td>
                    A <i>string</i> describing the person or service that performed the installation
                    <br /><br />
                    <i>For example, BuildMaster uses the user who triggered the deployment or SYSTEM if it was a triggered/scheduled deployment</i>
                </td>
            </tr>
            <tr>
                <td><code>repackageHistory</code></td>
                <td>
                    An <em>array</em> containing package identification strings or an objects with the following properties:
                    <ul>
                        <li><code>id</code><sup>R</sup> - a package identifications string</li>
                        <li><code>date</code> - A <em>string</em> representing the UTC date when the package was repackaged, in ISO 8601 format (yyyy-MM-ddThh:mm:ssZ)</li>
                        <li><code>reason</code> - A <em>string</em> describing the reason or purpose of the repackaging</li>
                        <li><code>using</code> - A <em>string</em> describing the mechanism the package was repackaged with; there are no format restrictions, but we recommend treating it like a User Agent string and including the tool name and version </li>
                        <li><code>by</code> -  A <em>string</em> describing the person or service that performed the repackage </li>
                        <li><code>url</code> -  A <em>string</em> where more information about the repackaging can be found, typically to logs within the tool that performed it  </li>
                    </ul>
                    You may include other properties in the object, but it is recommended to prefix the names with an underscore (_).
                </td>
            </tr>
        </tbody>
    </table>
    <p>
        An <code>R</code> denotes a required property.
    </p>
    <h3 id="additional-metadata" data-title="Additional Metadata">Additional Metadata</h3>
    <p>
        This object may contain additional properties as needed. However, if you need to add additional metadata,
        it's <b>strongly recommended</b> that you prefix these properties with an underscore (_)... just on the off-chance that
        a property you add will exist in a future version of the specification, or is returned in other metadata queries.
    </p>

    <h2 id="examples" data-title="Examples">Example upack.json Files</h2>
    <inedo:tab-block>
        <tab name="Example: Minimal">
            <pre>{
 "name": "HDARS",
 "version": "1.3.9"
}</pre>
        </tab>
        <tab name="Example: All Fields">
            <pre>{
 "group": "initrode/vendors/abl",
 "name": "ABLast",
 "version": "2.2.1",
 "title": "ast distribution files for ABL",
 "icon": "package://ablast.svg",
 "description": "This contains [ast distro](http://initrode-net.local/ast) files specific to ABL",
 "dependencies": [ "initrode/vendors-common:ast-common:2.0.0" ],
 "createdDate": "2017-11-09T04:03:01Z",
 "createdReason": "ABLast v2.2.1 #18 (ID8843) ",
 "createdUsing": "BuildMaster/5.6.11",
 "createdBy": "THoven",
 "repackageHistory": [
    "initrode/vendors/abl/ABlast:2.2.1-rc.3:2660bf74fc8147ca41bd53bdb1defc3aae35bc91",
    "initrode/vendors/abl/ABlast:2.2.1-ci.22322:ec702530cf73dbec0fc8667f7235fd3f17e24205"
  ]
}</pre>
        </tab>
        <tab name="Example: Extended File">
            <pre>{
 "group": "virtudyne/simdesk",
 "name": "var-index-service",
 "version": "5.3.9",
 "_sourceRoot": "$/global/vindex/branches/v5-hotfix"
 "_deployTarget": "/var/vsimdesk/vindex"
}</pre>
        </tab>
    </inedo:tab-block>


</body>
</html>