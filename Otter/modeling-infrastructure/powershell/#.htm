<html>
<head>
    <title>PowerShell &amp; Shell   Scripting</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="otter,powershell,scripts" />
    <meta name="show-headings-in-nav" content="true" />
</head>
<body>
    <p>
        <b>PowerShell</b> is the standard for automating configuration on Windows servers, and 
        <b>Bash/Sh</b> is the standard for automating configuration on Linux servers. Otter was designed to seamlessly integrate with both -- whether that
        means running your existing scripts across dozens of servers, leveraging scripts built by the community, or a custom combination of both.
    </p>
    <p>
        While you definitely don't need to be a scripting guru to use Otter, learning how to incorporate scripts into your Otter plans will enable you to automate virtually any aspect of Windows or Linux.
    </p>

    <h2 id="inline-execution" data-title="Inline PowerShell"><a name="inline-powershell-execution"></a>Inline Script Execution</h2>
    <p>
        Through <a href="../reference/operations/powershell/psexec">PSExec</a>,
         <a href="/support/documentation/otter/reference/operations/general/execute-shell-script">SHExec</a>
         and <a href="../reference/otter-script/strings-and-literals#string-syntax">Swim Strings</a>, 
        you can incorporate scripts directly into your <a href="/support/documentation/otter/core-concepts/plans">Plans</a>.
    </p>
    <inedo:tab-block>
        <tab name="PowerShell">
<pre>psexec >>
  # delete all but the latest 3 logs in the log directory
  Get-ChildItem "E:\Site\Logs\$ApplicationName" |
     Sort-Object $.CreatedDate -descending |
     Select-Object -skip 3 |
     Remove-Item
>>;</pre>
        </tab>
        <tab name="Shell">
            <pre>shexec >>
  echo "Hello from $ApplicationName";
>>;</pre>
        </tab>
    </inedo:tab-block>
    <p>Otter will seamlessly replace variables within your powershell script, so in the example above <code>$ApplicationName</code> might be defined as a <a href="../global-components/configuration-variables">Configuration Variable</a>.</p>
    
    <h2 id="calling-scripts" data-title="Calling PowerShell"><a name="calling-powershell-scripts"></a>Calling Scripts</h2>
    <p>
        After writing or uploading scripts as an <a href="../core-concepts/assets">Asset</a>, you can invoke them with 
        <a href="../reference/operations/powershell/pscall">PSCall</a> or <a href="/support/documentation/otter/reference/operations/general/shcall">SHCall</a>
         as if they were an Operation.
    </p>
    <inedo:tab-block>
        <tab name="PowerShell"><pre>pscall CreateUserInDirectory(
  domain: hdars.local,
  user: $UserName
);</pre><p>
    If you use PowerShell's header documentation standards, you'll get descriptions for script arguments when editing in visual mode.
</p></tab>
        <tab name="Shell"><pre>shcall ConfigDirectory(
  arguments: -domain=hdars.local -user=$UserName
);</pre></tab>
    </inedo:tab-block>
    
    <h2 id="evaluating-powershell-literals" data-title="Evaluating PowerShell">Evaluating PowerShell Literals</h2>
    <p>
        OtterScript is not a general-purpose programming language, and thus doesn't have built-in support for things like arithmetic. 
        You could, of course, write a <a href="../execution-engine/runtime-variables#variable-functions">custom variable function</a> to support this, but <a href="/support/documentation/otter/reference/functions/powershell/pseval">PSEval</a> is much easier:
    </p>
    <p>
        For example, if you wanted to convert the value stored in one variable (<code>$minutes</code>) to milliseconds. 
        You could PSEval the simple expression <code>$minutes * 60 * 1000</code>:
    </p>
    <div>
<pre>
set $milliseconds = $PSEval($minutes * 60 * 1000);
</pre>
    </div>
    <p>
        $PSEval runs the expression on the server currently in context, so use it inside of an <a href="../execution-engine/statements-and-blocks/if-else">If/Else Block</a> to perform different operations depending on the results
        of the expression on that server.
    </p>
    <h2 id="powershell-dsc" data-title="PowerShell DSC">PowerShell DSC</h2>
    <p>
        <a href="https://msdn.microsoft.com/en-us/powershell/dsc/overview">PowerShell Desired State Configuration (DSC)</a> offers 
        <a href="https://github.com/powershell/">quite a few open-source modules</a> that you can use to configure different features of Windows Servers.
        With 
        <a href="../reference/operations/powershell/psdsc">PSDsc</a>, you can invoke DSC Resources in nearly the same manner as a native DSC statement. 
    </p>
    <div>
<pre>
PSDsc xWebAppPool (
  Name: AccountsAppPool,
  Ensure: present
);
</pre>
    </div>
    <p>These declarative-style statements are essentially <i>Ensure Operations</i>, and thus will collect, report, and remediate drift just like the <a href="/support/documentation/otter/reference/operations">Built-in Operations</a>.</p>
    <h2 id="ensuring-scripts" data-title="Ensuring with PowerShell">Ensuring with Scripts</h2>
    <p>
        You can also use PowerShell or Shell scripts to gather and ensure a configuration about a server using <a href="../reference/operations/powershell/psensure">PSEnsure</a>
        and SHEnsure.
    </p>

    <h2 id="built-in-operations-scripts" data-title="Scripts vs Operations">Built-in Operations vs Scripts</h2>
    <p>
        Because a script can do <em>anything</em>, there's an obvious overlap between Otter's 
        built-in operations
         and a PowerShell CmdLet, or script that you might write.
    </p>
    <p>
        In general, you should use a built-in Operation when possible. Operations are designed to be massively parallel, cancellation-aware, and highly performant, andvalso provide descriptions when viewed outside of code.
    </p>
    <p>

        Many scripts, on the other hand, might be written to run interactively (i.e. in a command line), and may prompt for user input if an argument is missing, or does other things not suitable in for non-interactive, scalable environments.
    </p>
   
</body>
</html>