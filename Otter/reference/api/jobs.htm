<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Job Orchestration API Endpoints</title>
    <meta name="subtitle" content="Job Orchestration API" />
    <meta name="keywords" content="otter,api,jobs" />
    <style type="text/css">
        th {
            font-weight: normal;
            font-style: italic;
        }
    </style>
</head>
<body>
    <p>
        The Job Orchestration API Endpoints offer a simple mechanism for triggering and
        checking the status of <a href="../../core-concepts/jobs#orchestration">orchestration jobs</a>; these should be used 
        instead of the <a href="../api#native">Native API Methods</a> when possible, as they are much easier to use and will likely not change.
    </p>

    <p>
        As the name implies, these endpoints interact with <a href="../../core-concepts/jobs#orchestration">orchestration jobs</a>. For security and simplicity,
        they require that a <a href="../../core-concepts/jobs#templates">job template</a> is created first. To create a remediation job, you can use the <a href="configuration-management#trigger-remediation">configuration management</a> API.
    </p>
    <p>
        A job template must be configured to allow API use, and each job template may specify an <a href="../../administration/security#api-keys">API Key</a>. 
        Using this, you enable certain jobs to be created for low-security development server orchestration, and high-security production server orchestration.
    </p>

    <h3 id="trigger">Trigger Job Endpoint</h3>
    <p class="info">
        GET or POST <span style="opacity: 0.5">/api/jobs/</span><b>trigger</b>?template=&laquo;template-name&raquo;&amp;key=&laquo;optional-secret-key&raquo;
    </p>
    <p>
        Creates and triggers a job based on the specified template, returning a status of 200 (on success), 400 (missing or incorrect parameters), 404 (template not found), 
        or 403 (invalid key), and a body containing only a <em>job token</em>. 
    </p>
    <p>
        Any key/value pairs that are passed in the POST body or as additional query string parameters will be treated as job-scoped variables, and may override
        any values specified in the template.
    </p>

    <inedo:tab-block>
        <tab name="Simple GET">
            <p class="info">
                <code>GET /api/jobs/trigger?template=hdars&amp;key=secure123</code>
            </p>
            <pre>Status: 200<br />Body: 471</pre>
        </tab>
        <tab name="POST with Variables">
            <p class="info">
                <code>POST /api/jobs/trigger?template=ablast<br />
TargetServer=ABLSV1
SendNotification=sdennis@example.com
                </code>
            </p>
            <pre>Status: 200<br />Body: 1871</pre>
        </tab>
    </inedo:tab-block>

    <p>
		The returned token is <em>currently</em> the integer-based identifier used for jobs; however, please treat this as a string of arbitrary length,
		just in case the implementation detail changes to a GUID... or maybe even a <a href="https://www.nuget.org/packages/Rubbishsoft.LongGuid/">LongGuid</a>.
	</p>

    <h3 id="status">Job Status Endpoint</h3>
    <p class="info">
        GET or POST <span style="opacity: 0.5">/api/jobs/</span><b>status</b>?token=&laquo;job-token&raquo;&amp;key=&laquo;optional-secret-key&raquo;
    </p>
    <p>
        Gets the status of a job that was created with the <a href="#trigger">trigger</a> endpoint, using the job token returned by that method.
        The API returns a status of 200 (on success), 400 (invalid parameters), or 403 (invalid key), and a body containing one of the following
        strings:
    </p>
    <ul class="docs">
        <li>
            <code>Pending</code> - indicates that the job dispatcher has not yet begun execution; unless the Otter service is disabled, it will be very
            rare to find a job in this status
        </li>
        <li>
            <code>Succeeded</code> - indicates that the job is complete (and did not end in Warning or Error state)
        </li>
        <li>
            <code>Warning</code> - indicates that the job is complete but ended in a Warning state
        </li>
        <li>
            <code>Error</code> - indicates that the job is complete but ended in an Error state
        </li>
        <li>
            <code>Executing</code> - indicates that the job has not yet completed
        </li>
    </ul>

    <h3 id="logs">Job Logs Endpoint</h3>
    <p class="info">
        GET or POST <span style="opacity: 0.5">/api/jobs/</span><b>logs</b>?token=&laquo;job-token&raquo;&amp;key=&laquo;optional-secret-key&raquo;
    </p>
    <p>
        Gets the logs of a job that was created with the <a href="#trigger">trigger</a> endpoint, using the job token returned by that method.
        The API returns a status of 200 (on success), 400 (invalid parameters), or 403 (invalid key), and a body containing the <em>entire</em> set of
        logs produced by the job, with each entry prefixed with <code>DEBUG:</code>, <code>INFO:</code>, <code>WARN:</code>, or <code>ERROR:</code> and ending
        with a newline.
    </p>
   <p>
       Note that the logs entries are returned in the order in which they were logged; because of Otter's <a href="../../execution-engine/statements-and-blocks#logs">rich log scoping</a> and ability to execute many things
       <a href="../../execution-engine/statements-and-blocks/general-blocks#asynchronous">asynchronously</a>, this may not be the order you are used to
       seeing in the web application UI.
   </p>
</body>
</html>