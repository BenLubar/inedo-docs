<html>
<head>
    <title>Server Architecture</title>
    <meta name="subtitle" content="Server Architecture" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="inedo, inedo agent, server architecture" />
    <meta name="sequence" content="10" />
</head>
<body>
    <p>
        An Inedo Agent server has, at a minimum, the InedoAgent.exe process. This typically runs as a Windows service,
        although may be run interactively for diagnostic purposes.
    </p>
    <img src="/resources/documentation/agent-architecture.png" alt="Agent Architecture" />
    <p>
        This process is only responsible for listening for requests from agent clients (BuildMaster, Hedgehog, and Otter); as such,
        it consumes minimal system resources and should have a quick startup time.
    </p>
    <p>
        The Inedo Agent listens for and receives individual messages from the network stack (protocol described separately);
        there two types of messages:
    </p>
    <ul class="docs">
        <li><a href="/support/documentation/inedoagent/server-architecture/message-formats#meta">Meta</a> - the message should be processed by the InedoAgent.exe process directly</li>
        <li>Product - the message is passed along to the appropriate product host process</li>
    </ul>

    <h3>Product Host Processes</h3>
    <p>
        All orchestration happens in the context of a product host process. For Otter, this process is named Otter.Agent.exe.
        For BuildMaster, this process is named BuildMaster.Agent.exe. For Hedgehog, this process is named Hedgehog.Agent.exe.
    </p>
    <p>
        These processes are only ever intended to be started from a running InedoAgent.exe process, and will terminate immediately
        if executed any other way. Once started, a product host process communicates with InedoAgent.exe using a shared-memory buffer;
        this is functionally similar to a pipe.
    </p>
    <p>
        Once started, a product host process will load all of the appropriate product's extensions and wait for messages from the
        starting process (InedoAgent.exe).
    </p>

    <h3>Sessions</h3>
    <p>
        A <em>session</em> is essentially an identifier for a product host process instance, and all communication with a product
        host process happens in the context of this session. Sessions have the following behaviors/properties:
    </p>
    <ul class="docs">
        <li>Fully isolated from InedoAgent.exe and from each other - no handles are inherited and the only communication channel is the shared memory buffer</li>
        <li>Maintains a list of remotely-opened files and remotely-launched processes.</li>
        <li>When terminated gracefully, all file handles are closed</li>
        <li>When no clients have connected for 30 minutes, the session's product host process will be terminated</li>
        <li>In the event of an unexpected disconnect, the session will remain open for 30 minutes so a connection can be reestablished</li>
    </ul>

    <h3>Messages</h3>
    <p>
        A session operates on bi-directional, length-prefixed messages.
    </p>
    <p>
        Messages sent to the server (i.e. a product to an agent) are either instructions to perform some sort of task, or a request
        for some kind of data. Messages sent to the client (i.e. an agent to a product) are generally data only.
    </p>

    <h4><em>Message Targets</em></h4>
    <p>
        Server messages specify a target (either Meta, BuildMaster, Hedgehog, or Otter), which is used by InedoAgent.exe to determine which
        component will process the message. Its either processed by InedoAgent.exe directly (Meta), or forwarded to a product host process for
        processing.
    </p>
    <p>
        Client messages do not need to specify a target, as the target will already be part of an open session.
    </p>

    <h4>Message Types</h4>
    <p>
        While all messages specify a message code that identifies the type of message (i.e. how it should be processed), each target can only
        process its own message types. As such, <a href="/support/documentation/inedoagent/server-architecture/message-formats#meta">Meta</a>-targeted
        messages are part of the Inedo Agent specification, but product-targeted messages are not.
    </p>
    <p>
        Any references to BuildMaster, Hedgehog, or Otter messages types are for example purposes only; they are not part of the agent specification,
        and are subject to change in any version of the product.
    </p>

    <h4>Message Responses</h4>
    <p>
        Unlike HTTP/1.1 and similar unidirectional protocols, when all of the bytes representing a message are transmitted the server,
        the client does not wait for the server to send back a bunch of bytes as a response. As such, there is no concept of a <i>response</i> in
        the Inedo Agent protocol. When we use that term, it is simply the plain-English word that describes the taken when a message is received.
    </p>
    <p>
        If a response to a message is required, the server will simply send a message to the client with a specific message type indicating
        that it is a response to a specific type of message. Generally, the message data payload will contain some kind of token, along with
        serialized data or a serialized unhandled exception.
    </p>
</body>
</html>