<html>
<head>
    <title>Deployment Plans</title>
    <meta name="subtitle" content="Plans in BuildMaster" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="buildmaster, plans" />
    <meta name="show-headings-in-nav" content="true" />
    <meta name="sequence" content="300" />

</head>
<body>

    <p>
        Deployment plans are the instructions that tell BuildMaster exactly how to deploy your build and perform any other needed tasks during a release.
    </p>
    <p>
        They are written in language called OtterScript, and can be developed using the drag-and-drop editor. This saves you from having to learn the syntax before you can start building a plan. You can switch back-and-forth between visual and text modes to get a feel for the syntax and structure of the language pretty quickly, and master it in no time.
    </p>

    <inedo:tab-block>
        <tab name="Visual Mode">
            <img class="screenshot" src="/resources/documentation/otter/plan-blocks.png" alt="An IIS Plan Block (Visual Mode)" />
        </tab>
        <tab name="Text Mode (OtterScript)">
            <img class="screenshot" src="/resources/documentation/otter/plan-block-text.png" alt="An IIS Plan Block (Text Mode)" />
        </tab>
    </inedo:tab-block>
    <h3 id="creating-deployment-plans" data-title="Creating Deployment Plans">Creating Deployment Plans</h3>
  <p>
    You can create a deployment plan at the application- or global-level. Global plans behave in exactly the same manner, except you may only reference global modules.
  </p>
  <p>
    You may associate a deployment plan with an environment after you create it, which will allow you to restrict certain users from viewing its contents by defining an environment-scoped <a href="/support/documentation/buildmaster/administration/security">access control</a>. There’s no good reason to do this, as you shouldn’t be putting sensitive information in your deployment plans… but sometimes it can’t be helped.   
  </p>
  <h3 id="otterscript-basics" data-title="OtterScript Basics">OtterScript Basics</h3>
<p>
    OtterScript is a Domain-Specific Language that was designed for high-level orchestration and automation across servers, and is used to represent <a href="/support/documentation/otter/core-concepts/plans">configuration plans and orchestration plans</a> in Otter, and deployment plans in Hedgehog and BuildMaster.  
</p>
   <p>
    OtterScript is interpreted as a series of statements and blocks, in a top-down manner.   
   </p>
   <p>
   <b>Statements</b> are mostly <a href="/support/documentation/buildmaster/reference/operations">operations</a> that perform certain tasks, but there are a few other statements including <a href="/support/documentation/buildmaster/reference/operations/buildmaster/set-release-variable">set variable</a>, log message, set execution status, call template, and raise error.
   </p>
   <p>
   <b> Blocks</b> contain statements and other blocks. There are four types of blocks:    
   </p>
<ul class="docs">
    <li><a href="/support/documentation/buildmaster/execution-engine/statements-and-blocks/general-blocks">General block</a>; helps with grouping and organizing your statements, and offers various properties that define how statements and blocks will run
    </li>
    <li>
        <a href="/support/documentation/buildmaster/execution-engine/statements-and-blocks/loop">Loop block</a>; execute statements in a loop using an enumeration, such as a list of servers or roles 
    </li>
    <li>
     <a href="/support/documentation/buildmaster/execution-engine/statements-and-blocks/try-catch">Try/Catch block</a>; introduce error-handling logic or change the execution success/failure status     
    </li>
    <li>
      <a href="/support/documentation/buildmaster/execution-engine/statements-and-blocks/if-else">If/Else block</a>; conditionally execute statements based on an expression you specify   
    </li>
</ul>
<p>
    If you’re comfortable with programming or scripting, you may already be familiar with how these blocks work. To learn more, check out the <a href="/support/documentation/various/execution-engine/otterscript">OtterScript Guide</a> in the Inedo Execution Engine documentation.
</p>
<h3 id="powershell-and-shell" data-title="PowerShell and Shell Scripting">PowerShell and Shell Scripting</h3>
<p>
    OtterScript was designed to seamlessly integrate with PowerShell and Bash/Sh, and can run inline script blocks, evaluate scripting expressions into variable values, and call externally -stored script files called assets. 
</p>
<p>
    Script assets can be added to BuildMaster at the application- or global-level. Once added, your scripts will appear in the statement list in the visual plan editor, and the parameters to those scripts will be parsed and displayed as textboxes when editing in visual mode.
</p>
<!--
<p>
    To learn more, see the <em>PowerShell and Shell Scripting Guide</em> in the <em>Inedo Execution Engine documentation</em>.
</p>
-->
<h3 id="deployment-modules" data-title="Deployment Modules">Deployment Modules</h3>
<p>
    Modules are reusable plans that can be called from a deployment plan or other modules, as if it were an operation. Like deployment plans, modules can be created at the application- or global-level, and are edited using the visual plan editor.
</p>
<p>
    To create or edit modules, go to the Modules tab on the plans listing page. Modules are available in the statements list in the visual plan editor.   
</p>

<h4 id="module-parameters" data-title="Module Parameters">Module Parameters</h4>
<p>
    Similar to operations, modules can have input- and output parameters. You can edit these by clicking on the Module Properties button in the Visual Plan Editor (when in visual mode), or by editing the OtterScript directly. These parameters are then accessible as variables within the module.   
</p>
<div class="attention best-practice">
   
    <p>
        Modules are run within the scope of whatever block calls it, which means it will inherit all of that block’s variables. As a result, you should generally avoid relying on externally-defined variables in modules.
    </p>
</div>
<p>
    <b>Note:</b> <em>modules</em> are called <em>templates</em> in BuildMaster v5.
</p>
<h2 id="plan-version-control" data-title="Plan Version Control and Rollback">Plan Version Control and Rollback</h2>
<p>
    BuildMaster 5.8 and later maintains a history of edits and allows rollback to any plan version, similar to a "revert" in source control. Version history is maintained for both deployment plans and deployment modules.    
</p>
<h3 id="comparing-versions" data-title="Comparing Versions">Comparing Versions</h3>
<p>
    On any plan's listing page, select the version number to display a list of all versions of the plan. From the Plan Version Listing page, there are options to compare any previous versions with the current. On the Plan Version Comparison page, any global plan or plan from any application visible to a user may be compared side-by-side.
</p>
<h3 id="plan-rollback" data-title="Plan Rollback">Plan Rollback</h3>
<p>
    To roll back to a previous version of a deployment plan, select the "edit" option of the desired version from the Plan Version Listing page, and then save the plan. This will create a new version of the plan with the same contents as the rollback target.
</p>
</body>
</html>