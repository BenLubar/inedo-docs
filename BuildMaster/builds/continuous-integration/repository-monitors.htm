<html>
<head>
    <title>Builds &amp; Continuous Integration</title>
    <meta name="subtitle" content="Builds &amp; Continuous Integration" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="buildmaster, releases, builds" />
    <meta name="show-headings-in-nav" content="true" />
    <meta name="sequence" content="200" />
</head>
<body>
    

    <h3 id="repository-monitors" data-title="Repository Monitors">Repository Monitors</h3>
    <p>
        Repository monitors are an extensible component that can be
        configured to poll a source control repository at a custom interval, capturing
        and comparing the latest commit to determine whether a new build should be
        created, or a custom OtterScript plan should run.
    </p>

    <div class="attention analogy">
        <img src="/resources/images/icons/analogy.png" />
        <p>
            BuildMaster supports a repository
            monitor for Git repositories. Install the Git extension (v1.1 or later) to use
            it. Visit the <a href="https://github.com/Inedo/inedox-git/wiki">Git extension Wiki</a>
            for more information.
        </p>
    </div>

    <h4>Configuring a Repository Monitor</h4>
    <p>
        A repository monitor may be created from the Administration
        &gt; Repository Hooks &amp; Monitors page, or from the Builds submenu in the
        context of an application. The following fields apply to all monitors:
    </p>

    <ul class="docs">
        <li><b>Name</b> – a friendly name to identify the monitor in the UI</li>
        <li>
            <b>Run for application/group</b> – the application filter of the
            monitor
        </li>
        <li>
            <b>Plan</b> – the deployment plan to run when a new commit is
            detected. When no plan is assigned to the monitor, a new build is created for the
            latest release. See <a href="#custom-plans">Custom Plans</a> below for more information.
        </li>
        <li><b>Active</b> – determines whether the monitor is enabled</li>
        <li>
            <b>Schedule</b> <b>- </b>This cron expression determines the
            frequency that the repository will be checked for changes. See the
            <a href="https://www.quartz-scheduler.net/documentation/quartz-3.x/tutorial/crontrigger.html">Quartz Documentation</a>
            for information about this format as well as examples. The default configuration
            of '<code>0 0/4 * * * ?</code>' performs a check every 4 minutes.
        </li>
        <li>
            <b>Run on server</b> - When specified, the repository monitor
            will use this server to connect to the remote repository, otherwise the polling
            is performed from the BuildMaster server.
        </li>
    </ul>

    <p>The following fields apply specifically to the Git monitor:</p>

    <ul class="docs">
        <li>
            <b>Branch</b> – specifies the branch to be monitored, using <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference">regular expression syntax</a>
            to match the branch name.
        </li>
        <li>
            <b>Credentials</b> – the Resource Credentials used to connect to
            the Git repository
        </li>
        <li>
            <b>Repository URL</b> – the URL of the Git repository. By default
            this uses the repository defined in the credentials, or anonymous if not
            supplied in the credentials either
        </li>
        <li>
            <b>Git executable path</b> – By default, BuildMaster uses the
            LibGitSharp library for Git connections, but a path to Git client may be used
            instead for custom configurations (e.g. SSH connections, older versions of Git)
        </li>
    </ul>

    <p>
        Text fields for a monitor support variable expansion, allowing
        for simpler configuration. For example, a single Git repository monitor with a Repository
        URL of <code>https://github.com/inedo/inedo-$ToLower($ApplicationName)</code>
        for the "Extensions" application group would allow all descendant applications named
        after the extensions to automatically have builds created for them on commit.
    </p>

    <h4 id="custom-plans">Custom Plans</h4>
    <p>
        When a custom plan is assigned to a repository monitor, then
        instead of automatic creation of a new build, that plan will be executed in the
        context of all applications matching the specified application filter. Because of this, plans may be application-level
        or system-level plans, and application-level plans take precendence if both exist.
        During execution, any additional context from the commit will be <a href="#ci-plans">available via deployment variables</a> 
        to support more complex use-cases:
    </p>

    <ul class="docs">
        <li>
            Automatically creating a release &amp; build when a new branch is
            created by combining the <code>Ensure-Release</code> and <code>Create-Build</code> operations
        </li>
        <li>
            Sending an email notification when a change is detected using the
            <code>Send-Email</code> operation
        </li>
        <li>Create builds for multiple releases or spanning multiple applications</li>
    </ul>

    <h3 id="repository-hooks" data-title="Repository Hooks">Repository Hooks</h3>
    <p>
        BuildMaster supports custom webhook events fired by GitHub
        and GitLab. Visit the <a href="https://github.com/Inedo/inedox-git/wiki">Git extension Wiki</a>
        for more information on the configuration required for each specific system.
    </p>

    <h3 id="ci-plans" data-title="Hook &amp; Monitor Plans">Hook &amp; Monitor Plans</h3>
    <p>
        Both Repository Monitors and Repository Hooks support common variables that can be used within the plan. The default variables include:
    </p>
    <ul>
        <li><code>$Branch</code> - the ref that a commit was pushed to without <code>refs/heads/</code> at the beginning, e.g. <code>master</code></li>
        <li><code>$CommitHash</code> - the ID, SHA, or hash associated with the commit, e.g. <code>525571720b56ca53d1d3229e774c7b7980d3ff2b</code></li>
    </ul>
    <div class="attention best-practice">
        <p>
            <b>Note:</b> these variables are <i>only</i> available when a custom plan is specified. If using the <i>default</i> setting (i.e. creating
            a build for the latest release), these variables are not available. This is primarily to support backwards compatibility of existing
            pipelines that rely on a configuration variable with the same name at a different scope.
        </p>
    </div>
    <p>
        To replicate the <i>default</i> no-plan behavior with these variables in context, you may reference a system-level plan defined simply as:
    </p>
    <pre><code>Create-Build
(
    Application: $ApplicationName,
    Variables: %(Branch: $Branch, CommitHash: $CommitHash)
);
</code></pre>
    <p>
        Additional context may be available depending on the repository host. Visit the <a href="https://github.com/Inedo/inedox-git/wiki">Git extension Wiki</a>
        for more information.
    </p>

    
</body>
</html>