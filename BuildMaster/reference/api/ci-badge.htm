<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>CI Badge API</title>

    <meta name="keywords" content="buildmaster,api,builds,badges" />
    <meta name="show-headings-in-nav" content="true" />
    </head>
<body>
    <style type="text/css">
        th {
            font-weight: normal;
            font-style: italic;
        }

        .badge {
            width: 125px;
            vertical-align: middle;
        }
    </style>
    <p>
        The CI Badge API offers a simple way to allow external tools to query build status in order
        to generate a "CI Badge" with a helpful link directly to the build or deployment execution that
        the status on the badge refers to.
    </p>
    <h2 id="API-key-usage" data-title="API Key Usage"> API Usage</h2>
    <p>
        Each of these endpoints require that an API Key with CI Badge access is supplied with each request.
        The examples use a query string for simplicity since most rendered versions will be directly rendered to a web page, 
        but you could also use a header, form value, or JSON property. See 
        <a href="/docs/buildmaster/administration/security#api-keys">API Access &amp; API Keys</a> for more information.
    </p>
    <div class="attention analogy">
        <img src="/resources/images/icons/analogy.png" />
        <p>
            As a best practice, API keys used for the CI Badge API should <i>only</i> allow access to the CI Badge API,
            and should not have access to any other APIs because they will be visible to anyone with access to the external system.
        </p>
    </div>

    <h2 id="endpoints">Endpoint Specifications</h2>
    <p>
        This endpoint receives data entirely as key/value parameters, which may be specified in both
        the querystring (recommended) but also body (<code>application/x-www-form-urlencoded</code>); duplicate
        keys will result in undefined behavior.
    </p>

    <h3 id="arguments">Endpoint Arguments</h3>
    <p>
        The arguments to both endpoints are the same, an API key (supplied as <code>key</code> or <code>API_Key</code>), and additional
        "OData-style" intersectional (i.e. AND'ed) filters to locate a matching build:
    </p>
    <table>
        <thead>
            <tr>
                <th>Argument</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>$ApplicationName</code></td>
                <td><i>(indexed)</i> The latest execution of the latest build of the latest release in the specified application name</td>
            </tr>
            <tr>
                <td><code>$ApplicationId</code></td>
                <td><i>(indexed)</i> The latest execution of the latest build of the latest release in the specified application ID</td>
            </tr>
            <tr>
                <td><code>$ReleaseNumber</code></td>
                <td><i>(indexed)</i> The latest execution of the latest build of the specified release number; it is recommended to supply an application specifier with this argument</td>
            </tr>
            <tr>
                <td><code>$BuildNumber</code></td>
                <td><i>(indexed)</i> The latest execution of the specified build; it is recommended to supply an application specifier with this argument</td>
            </tr>
            <tr>
                <td><code><i>$CustomVariable</i></code></td>
                <td>
                    Using a custom variable name and value pair as an argument will locate a build with a matching variable value in context. Common
                    examples are <code>$GitCommit</code>, <code>$Branch</code>, <code>$Tag</code> such that the first build found that matches
                    this specified build variable and value will be used for the badge status.
                </td>
            </tr>
        </tbody>
    </table>
    <p>
        Refer to the <a href="#examples">examples</a> section for more information and use-cases.
    </p>

    <h3 id="image" data-title="Image Endpoint">Image Endpoint</h3>
    <p class="info">GET <span style="opacity: 0.5">/api/ci-badges/image</span></p>
    <p>
        If successful, returns the 200 status with the content of an SVG image (content type <code>image/svg+xml</code>, 
        or <code>gzip</code> if compression is supported by the client) representing the status of the queried build, 
        one of the following:
    </p>
    <table>
        <thead>
            <tr>
                <th>Badge</th>
                <th>Conditions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><img class="badge" src="/resources/documentation/buildmaster/6/ci/success.svg" alt="Success" /></td>
                <td>Latest matching build execution completed successfully</td>
            </tr>
            <tr>
                <td><img class="badge" src="/resources/documentation/buildmaster/6/ci/pending.svg" alt="Pending" /></td>
                <td>Latest matching build execution created but hasn't started yet</td>
            </tr>
            <tr>
                <td><img class="badge" src="/resources/documentation/buildmaster/6/ci/running.svg" alt="Running" /></td>
                <td>Latest matching build execution is in progress</td>
            </tr>
            <tr>
                <td><img class="badge" src="/resources/documentation/buildmaster/6/ci/warning.svg" alt="Warning" /></td>
                <td>Latest matching build execution completed with at least one warning</td>
            </tr>
            <tr>
                <td><img class="badge" src="/resources/documentation/buildmaster/6/ci/error.svg" alt="Error" /></td>
                <td>Latest matching build execution completed with at least one error</td>
            </tr>
            <tr>
                <td><img class="badge" src="/resources/documentation/buildmaster/6/ci/unknown.svg" alt="Unknown" /></td>
                <td>No matching builds found.</td>
            </tr>
        </tbody>
    </table>
    <p>
        This endpoint will always return a 200 unless the API key is not valid or unauthorized, resulting in a 403.
    </p>

    <h3 id="link" data-title="Link URL Endpoint">Link URL Endpoint</h3>
    <p class="info">GET <span style="opacity: 0.5">/api/ci-badges/link</span></p>
    <p>
        If successful, returns the 303 redirect status with the <code>Location</code> header to a page within BuildMaster
        depending on the <code>page</code> argument:
    </p>
    <table>
        <thead>
            <tr>
                <th>"Page" argument</th>
                <th>Redirect Page</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>build</code></td>
                <td><i>(default)</i> Build Overview page</td>
            </tr>
            <tr>
                <td><code>release</code></td>
                <td>Release Overview page</td>
            </tr>
            <tr>
                <td><code>application</code></td>
                <td>Application Overview page</td>
            </tr>
            <tr>
                <td><code>execution</code></td>
                <td>Execution details page, either for a specific execution ID or the latest execution to first stage for matching build</td>
            </tr>
        </tbody>
    </table>

    <p>A successful matching build will result in a 303 redirect, and other errors will result in a 400 or 403.</p>

    <h3 id="examples">Examples</h3>
    <inedo:tab-block>
        <tab name="HTML">
            <code><pre>&lt;a href="https://buildmaster.inedo.com/api/ci-badges/link?key=badges&amp;$ApplicationName=Windows" rel="nofollow"&gt;
  &lt;img alt="Build status" src="https://buildmaster.inedo.com/api/ci-badges/image?key=badges&amp;$ApplicationName=Windows" /&gt;
&lt;/a&gt;</pre></code>
        </tab>
        <tab name="GitHub README Markdown">
            <code><pre>[![Build status](https://buildmaster.inedo.com/api/ci-badges/image?key=badges&amp;$ApplicationName=InedoCore)](https://buildmaster.inedo.com/api/ci-badges/link?key=badges&amp;$ApplicationName=InedoCore)</pre></code>
        </tab>
        <tab name="GitLab Project/Group">
            <p>Under <b>Settings</b> &raquo; <b>General</b> of a project or group:</p>
            <b>Link:</b>
            <p><code><pre>https://buildmaster.inedo.com/api/ci-badges/link?key=badges&amp;$ApplicationName=%{project_path}</pre></code></p>
            <b>Image URL:</b>
            <p><code><pre>https://buildmaster.inedo.com/api/ci-badges/image?Key=badges&amp;$ApplicationName=%{project_path}</pre></code></p>
        </tab>
    </inedo:tab-block>
    <div class="attention best-practice">
        <p>
            If the application name doesn't match exactly, simply add an Application-scoped configuration variable that matches the
            project name, and filter by that variable name instead.
        </p>
    </div>
</body>
</html>