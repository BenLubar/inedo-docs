<html>
<head>
    <title>PowerShell &amp; Shell Scripting</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="buildmaster,powershell,linux,scripts" />
    <meta name="sequence" content="400" />
</head>
<body>
    <p>
        <b>PowerShell</b> is <em>the</em> standard for automating configuration on Windows servers, 
        <b>Bash/Sh</b> is <em>the</em> standard for automating configuration on Linux servers, 
        and BuildMaster was designed to seamlessly integrate with both -- whether that means running your existing scripts across dozens of servers, leveraging scripts built by the community, or any customized way needed.
    </p>
    <p>
        While you definitely don't need to be a scripting guru to use BuildMaster, learning how to incorporate scripts into your BuildMaster deployment plans will enable 
        you to automate virtually any aspect of Windows or Linux.
    </p>
    <h2 id="scripts-in-buildmaster" data-title="Script Assets">Script Assets in BuildMaster</h2>
    <p>
        BuildMaster makes it incredibly easy to use your current scripts to automate your application deployments. Once you've added a script as an asset (either in the Admin/global section, or as an Application asset), 
        you can call it as an operation in a deployment plan, and BuildMaster will execute those scripts and present rich logs about their execution. 
    </p>
    <h2 id="inline-powershell-execution" data-title="Inline Script Execution">Inline Script Execution</h2>
    <p>
        Through <a href="../reference/operations/powershell/psexec">PSExec</a>, <a href="../reference/operations/powershell/psexec">SHExec</a>, 
        and <a href="/support/documentation/otter/reference/otter-script/strings-and-literals#string-syntax">swim strings</a>, 
        you can incorporate scripts directly into your plans.
    </p>
    <inedo:tab-block>
        <tab name="PowerShell">
            <pre>psexec >>
  # delete all but the latest 3 logs in the log directory
  Get-ChildItem "E:\Site\Logs\$ApplicationName" |
     Sort-Object $.CreatedDate -descending |
     Select-Object -skip 3 |
     Remove-Item
>>;</pre>
        </tab>
        <tab name="Shell">
            <pre>shexec >>
  echo "Hello $ApplicationName";
>>;</pre>
        </tab>
    </inedo:tab-block>
    <div>

    </div>
    <p>BuildMaster will seamlessly replace variables within your scripts, so in the example above <code>$ApplicationName</code> might be defined as a <a href="../global-components/configuration-variables">configuration variable</a>.</p>
    <h2 id="calling-powershell-scripts" data-title="Calling Scripts">Calling Scripts</h2>
    <p>
        After writing or uploading scripts as a script asset, you can invoke them with 
        <a href="../reference/operations/powershell/pscall">PSCall</a> or <a href="../reference/operations/powershell/pscall">SHCall</a>
         as if they were an <a href="/support/documentation/buildmaster/reference/operation">Operation</a>.
    </p>
    <inedo:tab-block>
        <tab name="PowerShell">
            <pre>pscall CreateUserInDirectory(
  domain: hdars.local,
  user: $UserName
);</pre>
            <p>
                If you use PowerShell's header documentation standards, you'll even get rich descriptions for script arguments when editing in visual mode.
            </p>
        </tab>
        <tab name="Shell">
            <pre>shcall ConfigDirectory(
  arguments: -domain=hdars.local -user=$UserName
);</pre>
        </tab>
    </inedo:tab-block>


    <h2 id="evaluating-powershell-literals" data-title="Evaluating PowerShell Literals">Evaluating PowerShell Literals</h2>
    <p>
        The <a href="/support/documentation/buildmaster/execution-engine/overview">BuildMaster Execution Engine</a> is not a general-purpose programming runtime, and thus doesn't have built-in support for things like arithmetic. 
        You could, of course, write a <a href="../execution-engine/runtime-variables#variable-functions">custom variable function</a> to support this, but PSEval is much easier:
    </p>
    <p>
        For example, say that you wanted to convert the value stored in one variable (<code>$minutes</code>) to milliseconds. 
        You could PSEval the simple expression <code>$minutes * 60 * 1000</code>:
    </p>
    <div>
        <pre>
set $milliseconds = $PSEval($minutes * 60 * 1000);
    </pre>
    </div>
    <p>
        $PSEval actually runs the expression on the server currently in context, so use it inside of an <a href="../execution-engine/statements-and-blocks/if-else">If/Else Block</a> to perform different operations depending on the results
        of the expression on that server.
    </p>

    <h2 id="built-in" data-title="Built-in Operations vs Scripts">Built-in Operations vs Scripts</h2>
    <p>
        Because a script can do <em>anything</em>, there's an obvious overlap between BuildMaster's 
        <a href="../reference/operations">built-in operations</a>
         and a PowerShell CmdLet or script that you might write.
    </p>
    <p>
        In general, you should use a built-in Operation when possible: Operations are designed to be massively parallel, cancellation-aware, and highly performant, and they
        also provide rich descriptions when viewed outside of code.
    </p>
    <p>

        Many scripts, on the other hand, are often written to run interactively (i.e. in a commandline), and may prompt for user input if an argument is missing, or
        do other things not suitable in for non-interactive, scalable environments.
    </p>
   
</body>
</html>