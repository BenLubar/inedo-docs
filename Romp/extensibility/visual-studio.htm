<html>
  <head>
    <title>Romp for Visual Studio </title>
    <meta name="subtitle" content="Romp for Visual Studio " />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="romp, visual studio" />
    <meta name="sequence" content="770" />
  </head>
  <body>
      <style>
          .info.romp {
              border-color: #98002E;
              color: #98002E;
          }
      </style>
      <div class="attention technical">
          <p>
              Romp for Visual Studio is currently a technical preview. You can <a href="https://github.com/Inedo/VsRomp">view the source code</a> or <a href="https://github.com/Inedo/VsRomp/releases">download the latest release</a> from GitHub to install in your instance of Visual Studio.
          </p>
      </div>
          <p>
              <i>Romp for Visual Studio</i> is a plugin that makes it even easier to build Romp packages for your application components.
          </p>
          
          <p>
              Just like the ProGet Visual Studio Plugin, this plugin adds an item to the project context menu. It’s a flyout menu named "Romp", with the following options:
          </p>
          <p>
              <img style="border: 1px solid #808080;" class="screenshot" src="/resources/documentation/romp/visual-studio/context-menu.png" />
          </p>
          <h3>Configure</h3>

          <p>This command will open the Configure Project for Romp dialog, and displays a UI for the options available in <code>rompPackage.json</code>. If the file exists, the options will be pre-populated with those values.</p>

          <p>When you click the Configure button, the configuration window appears, and a <code>.upack</code> folder will be created if it doesn't exist, while also updating the <code>rompPackage.json</code>.</p>
      <p>
          As you tab through the configuration window, you'll be able to see where the edits made in the visual editor translate to the text files on disk.
      </p>
      <h4 style="padding: 12px 0;" id="metadata">Metadata</h4>
      <img class="screenshot" src="/resources/documentation/romp/visual-studio/metadata.png" />
      <h4 style="padding: 12px 0;" id="package">Package</h4>
      <img class="screenshot" src="/resources/documentation/romp/visual-studio/package.png" />
      <h4 style="padding: 12px 0;" id="variables">Variables</h4>
      <img class="screenshot" src="/resources/documentation/romp/visual-studio/variables.png" />
      <h4 style="padding: 12px 0;" id="credentials">Credentials</h4>
      <img class="screenshot" src="/resources/documentation/romp/visual-studio/credentials.png" />
  
          <h3>Validate</h3>

          <p>This wraps the <a href="/docs/romp/command-line/command-overview/installation#validate">romp validate</a> method, and outputs any errors in the build output window.</p>

          <h3>Package</h3>

          <p>This wraps the <a href="/docs/romp/command-line/command-overview/creating-publishing#pack">romp pack</a> method, outputting the package to the package root folder.</p>

          <h3>Test</h3>

          <p>This runs the <a href="/docs/romp/command-line/command-overview/installation#install">romp install</a> method, but specifies an <!--the ??? -->option, which means it does not add the package to the local registry.</p>

          <h3>Push</h3>

          <p>Similar to the <a href="/support/tutorials/proget/push-to-proget-from-visual-studio">ProGet Visual Studio Plugin</a>.</p>

          <h2>Other Notes</h2>

          <p>Romp for Visual Studio uses a <code>.upack/</code> folder, located at a project's root, that is laid out exactly like a <a href="/docs/romp/romp-packages/layout">regular romp package</a>, exception without a package/ subfolder. Instead, MSBuild's output folder is used to create the contents at packing time.</p>

          <p>The plugin uses an embedded version of Romp (the version is indicated in the notes), but you can configure it to point to another installation on your machine if desired.</p>
      
  </body>
</html>