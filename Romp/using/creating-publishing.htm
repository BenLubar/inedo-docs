<html>
  <head>
    <title>Creating and Publishing an IIS Website</title>
    <meta name="subtitle" content="Creating and Publishing an IIS Website" />
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
    <meta name="keywords" content="romp, upack, getting-started," />
      <meta name="show-headings-in-nav" content="true" />
    <meta name="sequence" content="10" />
  </head>
  <body>
      <style>
          .info.romp {
              border-color: #98002E;
              color: #98002E;
          }
      </style>
      <p>
          In this tutorial, we will take an existing Romp Package and deploy it with Romp. The package contents in Accounts.Web-1.5.0.upack are the build output of a basic .NET web application.
      </p>
      <hr />


      <p><h4 id="prereq">Prerequisites</h4></p>
      <p>
          <ul class="docs">
              <li>
                  Download and install the latest version of Romp from here: <a href="/romp/download">https://inedo.com/romp/download</a>
              </li>
              <li>
                  Download Accounts.Web-1.5.0.upack from: <a href="http://cdn.inedo.com/downloads/romp/Accounts.Web-1.5.0.upack">http://cdn.inedo.com/downloads/romp/Accounts.Web-1.5.0.upack</a>
              </li>
              <li>
                  IIS installed on the server or workstation used for this tutorial
              </li>
              <li>
                  -	Basic PowerShell or Windows Command Prompt knowledge
              </li>
          </ul>
      </p>

      <h2 id="package-structure" data-title="Package Structure">
          Package Structure
      </h2>
      <p>
          A romp package is simply a upack with <a href="/support/documentation/romp/romp-packages/layout">additional layout requirements</a>.
      </p>

      <p>
          Once created, we will be taken to the Manage Feed page. Select "DeploymentPackages" from the breadcrumb to view the Feed Overview page. In the Accounts.Web-1.5.0 example package, there are the following extra files:
      </p>
      <ul class="docs">
          <li>
              <strong>install.otter</strong> – the OtterScript plan used for deployment
          </li>
          <li>
              <strong>packageVariables.json</strong> – a collection of values captured at build time intended to be used by package deployers in decision making
          </li>
      </ul>
      <p>
          You may examine the package file contents using any program capable of examining a zip file.
      </p>
      <h2 id="verifying" data-title="Verifying the Romp Package">Verifying the Romp Package</h2>
      <p>
          It is a good practice to verify that a package follows the basic format requirements of a romp package. To accomplish this, we will save the package <code>C:\tmp\romp</code> and run the <code>validate</code> command:
      </p>
      <p class="info"><code>  PS C:\tmp\romp> romp validate Accounts.Web-1.5.0.upack</code></p>
      <p>
          If there are any validation errors, they will be written to standard error.
      </p>
      <h2 id="deploying" data-title="Deploying the Package">Deploying the Package</h2>
      <p>
          The key feature of Romp is the ability to deploy the application within the package and configure the environment required for the application to run. To deploy the package to a target directory, run the <code>install</code> command in a PowerShell window running as Administrator:
      </p>
      <p class="info"><code>  PS C:\tmp\romp> romp install .\Accounts.Web-1.5.0.upack</code></p>
      <p>
          At this point, we will be prompted for the <code>$TargetDirectory</code> variable:
      </p>
      <p class="info">
          <code>  Variable "TargetDirectory" is required.</code><br />
          <code>  Description: Directory to install the package contents.</code><br />
          <code>  $TargetDirectory: C:\tmp\romp-install</code>
      </p>
      <p>
          Once entered, Romp will begin executing the contained <code>install.otter</code> plan which automatically extracts the package contents (i.e. the build output), configures the Accounts application and website in IIS, and starts both:
      </p>
      <img class="screenshot" style="border: 1px solid #808080;" src="/resources/tutorials/romp/install-otter-plan.png" />
      <h2 id="romp-do">What did Romp just do?</h2>
      <p>
          It may seem like magic, but Romp is simply invoking the <a href="/support/documentation/various/execution-engine/otterscript">execution engine</a> to perform the steps outlined in the install.otter plan. To gather more information for what just happened, you use the <code>jobs</code> subcommand:
      </p>
      <p class="info">
          <code>  PS C:\tmp\romp> romp jobs</code><br />
          <code>  romp 1.0.0</code><br />
          <code>  Usage:</code><br />
          <code>  romp jobs list</code><br />
          <code>  romp jobs logs [jobId]</code><br />
          <code>  romp jobs purge &lsaquo;days&rsaquo;</code><br />
          <code>  PS C:\tmp\romp> romp jobs list</code><br />
          <code>  romp 1.0.0</code><br />
          <code>  Jobs:</code><br />
          <code>   8 5/4/2018 9:58:16 AM Normal</code><br />
          <code>   7 5/4/2018 9:57:47 AM Normal</code><br />
          <code>   …</code><br />
          <code>   1 5/3/2018 6:15:14 PM Error</code><br />
      </p>
      <p>
          This command shows the history of jobs executed by romp. To get a detailed log, use the <code>romp jobs logs</code> command, (or <code>romp jobs logs #</code> replacing the # with a specific job ID):
      </p>
      <p class="info">
          <code>  PS C:\tmp\romp> romp jobs logs</code><br />
          <code>  romp 1.0.0</code><br />
          <code>  ** (unnamed scope) **</code><br />
          <code>   ** Ensure Accounts Application Pool with .NET CLR v4.0 **</code><br />
          <code>    DEBUG: Looking for Application Pool "Accounts"...</code><br />
          <code>    DEBUG: Applying configuration...</code><br />
          <code>    DEBUG: Committing configuration...</code><br />
          <code>     INFO: Application Pool "Accounts" configured.</code><br />
          <code></code><br />
          <code>   ** Ensure IIS Site: Accounts application pool Accounts; virtual directory<br/>path: $TargetDirectory **</code><br />
          <code>    DEBUG: Looking for Site "Accounts"...</code><br />
          <code>  ...</code><br />
      </p>
      <h2 id="removing-ex">Removing the Example Website</h2>
      <p>
          This example package includes an uninstall.otter script which enables removal of the website and associated files. To undo everything that was done in this tutorial, use the <code>uninstall</code> command:
      </p>
      <p class="info"><code>  PS C:\tmp\romp> romp uninstall Accounts.Web</code></p>
      <p>
          Note that this command uses the package **name** to identify the installed package, not the package file.
      </p>
  </body>
</html>